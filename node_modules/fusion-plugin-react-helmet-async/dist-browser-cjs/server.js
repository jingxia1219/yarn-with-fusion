"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _jsxRuntime = require("react/jsx-runtime");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
const keys = ['meta', 'link', 'style', 'base', 'noscript', 'script'];
const plugin = false && createPlugin({
  middleware: () => {
    return async (ctx, next) => {
      if (!ctx.element) {
        return next();
      }

      const helmetContext = {};
      ctx.element = /*#__PURE__*/(0, _jsxRuntime.jsx)(HelmetProvider, {
        context: helmetContext,
        children: ctx.element
      });
      await next();
      const {
        helmet
      } = helmetContext;

      if (helmet) {
        ctx.template.title = dangerouslySetHTML(helmet.title.toString().replace('</title>', '').replace(/^<title.*>/, ''));
        keys.forEach(key => {
          ctx.template.head.push(dangerouslySetHTML(helmet[key].toString()));
        });
        Object.assign(ctx.template.htmlAttrs, helmet.htmlAttributes.toComponent());
      }
    };
  }
});
var _default = plugin;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9zZXJ2ZXIuanMiXSwibmFtZXMiOlsia2V5cyIsInBsdWdpbiIsImNyZWF0ZVBsdWdpbiIsIm1pZGRsZXdhcmUiLCJjdHgiLCJuZXh0IiwiZWxlbWVudCIsImhlbG1ldENvbnRleHQiLCJoZWxtZXQiLCJ0ZW1wbGF0ZSIsInRpdGxlIiwiZGFuZ2Vyb3VzbHlTZXRIVE1MIiwidG9TdHJpbmciLCJyZXBsYWNlIiwiZm9yRWFjaCIsImtleSIsImhlYWQiLCJwdXNoIiwiT2JqZWN0IiwiYXNzaWduIiwiaHRtbEF0dHJzIiwiaHRtbEF0dHJpYnV0ZXMiLCJ0b0NvbXBvbmVudCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQVFBOzs7Ozs7QUFSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVFBLE1BQU1BLElBQUksR0FBRyxDQUFDLE1BQUQsRUFBUyxNQUFULEVBQWlCLE9BQWpCLEVBQTBCLE1BQTFCLEVBQWtDLFVBQWxDLEVBQThDLFFBQTlDLENBQWI7QUFFQSxNQUFNQyxNQUFNLEdBQ1YsU0FDQUMsWUFBWSxDQUFDO0FBQ1hDLEVBQUFBLFVBQVUsRUFBRSxNQUFNO0FBQ2hCLFdBQU8sT0FBT0MsR0FBUCxFQUFZQyxJQUFaLEtBQXFCO0FBQzFCLFVBQUksQ0FBQ0QsR0FBRyxDQUFDRSxPQUFULEVBQWtCO0FBQ2hCLGVBQU9ELElBQUksRUFBWDtBQUNEOztBQUNELFlBQU1FLGFBQWEsR0FBRyxFQUF0QjtBQUNBSCxNQUFBQSxHQUFHLENBQUNFLE9BQUosZ0JBQ0UscUJBQUMsY0FBRDtBQUFnQixRQUFBLE9BQU8sRUFBRUMsYUFBekI7QUFBQSxrQkFBeUNILEdBQUcsQ0FBQ0U7QUFBN0MsUUFERjtBQUdBLFlBQU1ELElBQUksRUFBVjtBQUNBLFlBQU07QUFBQ0csUUFBQUE7QUFBRCxVQUFXRCxhQUFqQjs7QUFDQSxVQUFJQyxNQUFKLEVBQVk7QUFDVkosUUFBQUEsR0FBRyxDQUFDSyxRQUFKLENBQWFDLEtBQWIsR0FBcUJDLGtCQUFrQixDQUNyQ0gsTUFBTSxDQUFDRSxLQUFQLENBQ0dFLFFBREgsR0FFR0MsT0FGSCxDQUVXLFVBRlgsRUFFdUIsRUFGdkIsRUFHR0EsT0FISCxDQUdXLFlBSFgsRUFHeUIsRUFIekIsQ0FEcUMsQ0FBdkM7QUFNQWIsUUFBQUEsSUFBSSxDQUFDYyxPQUFMLENBQWNDLEdBQUQsSUFBUztBQUNwQlgsVUFBQUEsR0FBRyxDQUFDSyxRQUFKLENBQWFPLElBQWIsQ0FBa0JDLElBQWxCLENBQXVCTixrQkFBa0IsQ0FBQ0gsTUFBTSxDQUFDTyxHQUFELENBQU4sQ0FBWUgsUUFBWixFQUFELENBQXpDO0FBQ0QsU0FGRDtBQUdBTSxRQUFBQSxNQUFNLENBQUNDLE1BQVAsQ0FDRWYsR0FBRyxDQUFDSyxRQUFKLENBQWFXLFNBRGYsRUFFRVosTUFBTSxDQUFDYSxjQUFQLENBQXNCQyxXQUF0QixFQUZGO0FBSUQ7QUFDRixLQXpCRDtBQTBCRDtBQTVCVSxDQUFELENBRmQ7ZUFpQ2lCckIsTSIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBDb3B5cmlnaHQgKGMpIDIwMTggVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge2NyZWF0ZVBsdWdpbiwgZGFuZ2Vyb3VzbHlTZXRIVE1MfSBmcm9tICdmdXNpb24tY29yZSc7XG5pbXBvcnQge0hlbG1ldFByb3ZpZGVyfSBmcm9tICdyZWFjdC1oZWxtZXQtYXN5bmMnO1xuXG5pbXBvcnQgdHlwZSB7RnVzaW9uUGx1Z2lufSBmcm9tICdmdXNpb24tY29yZSc7XG5cbmNvbnN0IGtleXMgPSBbJ21ldGEnLCAnbGluaycsICdzdHlsZScsICdiYXNlJywgJ25vc2NyaXB0JywgJ3NjcmlwdCddO1xuXG5jb25zdCBwbHVnaW4gPVxuICBfX05PREVfXyAmJlxuICBjcmVhdGVQbHVnaW4oe1xuICAgIG1pZGRsZXdhcmU6ICgpID0+IHtcbiAgICAgIHJldHVybiBhc3luYyAoY3R4LCBuZXh0KSA9PiB7XG4gICAgICAgIGlmICghY3R4LmVsZW1lbnQpIHtcbiAgICAgICAgICByZXR1cm4gbmV4dCgpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGhlbG1ldENvbnRleHQgPSB7fTtcbiAgICAgICAgY3R4LmVsZW1lbnQgPSAoXG4gICAgICAgICAgPEhlbG1ldFByb3ZpZGVyIGNvbnRleHQ9e2hlbG1ldENvbnRleHR9PntjdHguZWxlbWVudH08L0hlbG1ldFByb3ZpZGVyPlxuICAgICAgICApO1xuICAgICAgICBhd2FpdCBuZXh0KCk7XG4gICAgICAgIGNvbnN0IHtoZWxtZXR9ID0gaGVsbWV0Q29udGV4dDtcbiAgICAgICAgaWYgKGhlbG1ldCkge1xuICAgICAgICAgIGN0eC50ZW1wbGF0ZS50aXRsZSA9IGRhbmdlcm91c2x5U2V0SFRNTChcbiAgICAgICAgICAgIGhlbG1ldC50aXRsZVxuICAgICAgICAgICAgICAudG9TdHJpbmcoKVxuICAgICAgICAgICAgICAucmVwbGFjZSgnPC90aXRsZT4nLCAnJylcbiAgICAgICAgICAgICAgLnJlcGxhY2UoL148dGl0bGUuKj4vLCAnJylcbiAgICAgICAgICApO1xuICAgICAgICAgIGtleXMuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgICAgICBjdHgudGVtcGxhdGUuaGVhZC5wdXNoKGRhbmdlcm91c2x5U2V0SFRNTChoZWxtZXRba2V5XS50b1N0cmluZygpKSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIGN0eC50ZW1wbGF0ZS5odG1sQXR0cnMsXG4gICAgICAgICAgICBoZWxtZXQuaHRtbEF0dHJpYnV0ZXMudG9Db21wb25lbnQoKVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSxcbiAgfSk7XG5cbmV4cG9ydCBkZWZhdWx0ICgocGx1Z2luOiBhbnkpOiBGdXNpb25QbHVnaW48dm9pZCwgdm9pZD4pO1xuIl19