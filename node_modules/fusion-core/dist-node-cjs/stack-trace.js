"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.captureStackTrace = captureStackTrace;
exports.DIError = void 0;

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
function captureStackTrace(caller) {
  // For monitoring in production, use a single format independent of browser
  if (false && !(process.env.NODE_ENV !== "production")) {
    return new Error().stack;
  } else {
    if ('captureStackTrace' in Error) {
      const err = {};
      Error.captureStackTrace(err, caller);
      return err.stack;
    } else {
      return new Error().stack;
    }
  }
}

class DIError extends Error {
  constructor({
    message,
    errorDoc,
    caller,
    stack
  }) {
    super(message);

    if (errorDoc) {
      this.link = `https://github.com/fusionjs/fusionjs/tree/master/errors/${errorDoc}.md`;
    }

    if (true || process.env.NODE_ENV !== "production") {
      if (caller && 'captureStackTrace' in Error) {
        Error.captureStackTrace(this, caller);
      }
    }

    if (stack) {
      // Replace the DIError stack trace with the supplied stack
      // Assumes `message` contains no new lines
      const diErrorMessage = this.stack.split('\n')[0];
      const stackOverride = stack.split('\n');
      stackOverride[0] = diErrorMessage;
      this.stack = stackOverride.join('\n');
    }
  }

}

exports.DIError = DIError;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9zdGFjay10cmFjZS5qcyJdLCJuYW1lcyI6WyJjYXB0dXJlU3RhY2tUcmFjZSIsImNhbGxlciIsIkVycm9yIiwic3RhY2siLCJlcnIiLCJESUVycm9yIiwiY29uc3RydWN0b3IiLCJtZXNzYWdlIiwiZXJyb3JEb2MiLCJsaW5rIiwiZGlFcnJvck1lc3NhZ2UiLCJzcGxpdCIsInN0YWNrT3ZlcnJpZGUiLCJqb2luIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRU8sU0FBU0EsaUJBQVQsQ0FBMkJDLE1BQTNCLEVBQW1DO0FBQ3hDO0FBQ0EsTUFBSSxTQUFlLHdDQUFuQixFQUE2QjtBQUMzQixXQUFPLElBQUlDLEtBQUosR0FBWUMsS0FBbkI7QUFDRCxHQUZELE1BRU87QUFDTCxRQUFJLHVCQUF1QkQsS0FBM0IsRUFBa0M7QUFDaEMsWUFBTUUsR0FBRyxHQUFHLEVBQVo7QUFDQUYsTUFBQUEsS0FBSyxDQUFDRixpQkFBTixDQUF3QkksR0FBeEIsRUFBNkJILE1BQTdCO0FBQ0EsYUFBT0csR0FBRyxDQUFDRCxLQUFYO0FBQ0QsS0FKRCxNQUlPO0FBQ0wsYUFBTyxJQUFJRCxLQUFKLEdBQVlDLEtBQW5CO0FBQ0Q7QUFDRjtBQUNGOztBQUVNLE1BQU1FLE9BQU4sU0FBc0JILEtBQXRCLENBQTRCO0FBQ2pDSSxFQUFBQSxXQUFXLENBQUM7QUFBQ0MsSUFBQUEsT0FBRDtBQUFVQyxJQUFBQSxRQUFWO0FBQW9CUCxJQUFBQSxNQUFwQjtBQUE0QkUsSUFBQUE7QUFBNUIsR0FBRCxFQUFxQztBQUM5QyxVQUFNSSxPQUFOOztBQUNBLFFBQUlDLFFBQUosRUFBYztBQUNaLFdBQUtDLElBQUwsR0FBYSwyREFBMERELFFBQVMsS0FBaEY7QUFDRDs7QUFDRCxRQUFJLDZDQUFKLEVBQXlCO0FBQ3ZCLFVBQUlQLE1BQU0sSUFBSSx1QkFBdUJDLEtBQXJDLEVBQTRDO0FBQzFDQSxRQUFBQSxLQUFLLENBQUNGLGlCQUFOLENBQXdCLElBQXhCLEVBQThCQyxNQUE5QjtBQUNEO0FBQ0Y7O0FBQ0QsUUFBSUUsS0FBSixFQUFXO0FBQ1Q7QUFDQTtBQUNBLFlBQU1PLGNBQWMsR0FBRyxLQUFLUCxLQUFMLENBQVdRLEtBQVgsQ0FBaUIsSUFBakIsRUFBdUIsQ0FBdkIsQ0FBdkI7QUFDQSxZQUFNQyxhQUFhLEdBQUdULEtBQUssQ0FBQ1EsS0FBTixDQUFZLElBQVosQ0FBdEI7QUFDQUMsTUFBQUEsYUFBYSxDQUFDLENBQUQsQ0FBYixHQUFtQkYsY0FBbkI7QUFDQSxXQUFLUCxLQUFMLEdBQWFTLGFBQWEsQ0FBQ0MsSUFBZCxDQUFtQixJQUFuQixDQUFiO0FBQ0Q7QUFDRjs7QUFuQmdDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIENvcHlyaWdodCAoYykgMjAxOCBVYmVyIFRlY2hub2xvZ2llcywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBub2Zsb3dcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY2FwdHVyZVN0YWNrVHJhY2UoY2FsbGVyKSB7XG4gIC8vIEZvciBtb25pdG9yaW5nIGluIHByb2R1Y3Rpb24sIHVzZSBhIHNpbmdsZSBmb3JtYXQgaW5kZXBlbmRlbnQgb2YgYnJvd3NlclxuICBpZiAoX19CUk9XU0VSX18gJiYgIV9fREVWX18pIHtcbiAgICByZXR1cm4gbmV3IEVycm9yKCkuc3RhY2s7XG4gIH0gZWxzZSB7XG4gICAgaWYgKCdjYXB0dXJlU3RhY2tUcmFjZScgaW4gRXJyb3IpIHtcbiAgICAgIGNvbnN0IGVyciA9IHt9O1xuICAgICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UoZXJyLCBjYWxsZXIpO1xuICAgICAgcmV0dXJuIGVyci5zdGFjaztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcigpLnN0YWNrO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgRElFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3Ioe21lc3NhZ2UsIGVycm9yRG9jLCBjYWxsZXIsIHN0YWNrfSkge1xuICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgIGlmIChlcnJvckRvYykge1xuICAgICAgdGhpcy5saW5rID0gYGh0dHBzOi8vZ2l0aHViLmNvbS9mdXNpb25qcy9mdXNpb25qcy90cmVlL21hc3Rlci9lcnJvcnMvJHtlcnJvckRvY30ubWRgO1xuICAgIH1cbiAgICBpZiAoX19OT0RFX18gfHwgX19ERVZfXykge1xuICAgICAgaWYgKGNhbGxlciAmJiAnY2FwdHVyZVN0YWNrVHJhY2UnIGluIEVycm9yKSB7XG4gICAgICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIGNhbGxlcik7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChzdGFjaykge1xuICAgICAgLy8gUmVwbGFjZSB0aGUgRElFcnJvciBzdGFjayB0cmFjZSB3aXRoIHRoZSBzdXBwbGllZCBzdGFja1xuICAgICAgLy8gQXNzdW1lcyBgbWVzc2FnZWAgY29udGFpbnMgbm8gbmV3IGxpbmVzXG4gICAgICBjb25zdCBkaUVycm9yTWVzc2FnZSA9IHRoaXMuc3RhY2suc3BsaXQoJ1xcbicpWzBdO1xuICAgICAgY29uc3Qgc3RhY2tPdmVycmlkZSA9IHN0YWNrLnNwbGl0KCdcXG4nKTtcbiAgICAgIHN0YWNrT3ZlcnJpZGVbMF0gPSBkaUVycm9yTWVzc2FnZTtcbiAgICAgIHRoaXMuc3RhY2sgPSBzdGFja092ZXJyaWRlLmpvaW4oJ1xcbicpO1xuICAgIH1cbiAgfVxufVxuIl19