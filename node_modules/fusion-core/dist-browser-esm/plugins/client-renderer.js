/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
export default function createClientRenderPlugin(app) {
  return function clientRenderPlugin({
    render
  }) {
    return function renderer(ctx, next) {
      app.renderSetupCtx = ctx; // Element wrappers should be added in *reverse* topological order so that
      // the resulting element tree is in topological order during renders.
      // For example, if plugin B depends on plugin A, the tree should be:
      // <AProvider>
      //   <BProvider>{root}</BProvider>
      // </APRovider>
      // In this case, B provider can depend on the context of A provider.

      for (var i = app.renderSetup.length - 1; i >= 0; i--) {
        const wrapper = app.renderSetup[i];
        const result = wrapper(ctx.element);

        if (result !== void 0) {
          ctx.element = result;
        }
      }

      app.renderSetupCtx = void 0;
      const rendered = render(ctx.element, ctx);

      if (rendered instanceof Promise) {
        return rendered.then(r => {
          ctx.rendered = r;
          return next();
        });
      } else {
        ctx.rendered = rendered;
        return next();
      }
    };
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wbHVnaW5zL2NsaWVudC1yZW5kZXJlci5qcyJdLCJuYW1lcyI6WyJjcmVhdGVDbGllbnRSZW5kZXJQbHVnaW4iLCJhcHAiLCJjbGllbnRSZW5kZXJQbHVnaW4iLCJyZW5kZXIiLCJyZW5kZXJlciIsImN0eCIsIm5leHQiLCJyZW5kZXJTZXR1cEN0eCIsImkiLCJyZW5kZXJTZXR1cCIsImxlbmd0aCIsIndyYXBwZXIiLCJyZXN1bHQiLCJlbGVtZW50IiwicmVuZGVyZWQiLCJQcm9taXNlIiwidGhlbiIsInIiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUEsZUFBZSxTQUFTQSx3QkFBVCxDQUFrQ0MsR0FBbEMsRUFBdUM7QUFDcEQsU0FBTyxTQUFTQyxrQkFBVCxDQUE0QjtBQUFDQyxJQUFBQTtBQUFELEdBQTVCLEVBQXNDO0FBQzNDLFdBQU8sU0FBU0MsUUFBVCxDQUFrQkMsR0FBbEIsRUFBdUJDLElBQXZCLEVBQTZCO0FBQ2xDTCxNQUFBQSxHQUFHLENBQUNNLGNBQUosR0FBcUJGLEdBQXJCLENBRGtDLENBRWxDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLFdBQUssSUFBSUcsQ0FBQyxHQUFHUCxHQUFHLENBQUNRLFdBQUosQ0FBZ0JDLE1BQWhCLEdBQXlCLENBQXRDLEVBQXlDRixDQUFDLElBQUksQ0FBOUMsRUFBaURBLENBQUMsRUFBbEQsRUFBc0Q7QUFDcEQsY0FBTUcsT0FBTyxHQUFHVixHQUFHLENBQUNRLFdBQUosQ0FBZ0JELENBQWhCLENBQWhCO0FBQ0EsY0FBTUksTUFBTSxHQUFHRCxPQUFPLENBQUNOLEdBQUcsQ0FBQ1EsT0FBTCxDQUF0Qjs7QUFDQSxZQUFJRCxNQUFNLEtBQUssS0FBSyxDQUFwQixFQUF1QjtBQUNyQlAsVUFBQUEsR0FBRyxDQUFDUSxPQUFKLEdBQWNELE1BQWQ7QUFDRDtBQUNGOztBQUNEWCxNQUFBQSxHQUFHLENBQUNNLGNBQUosR0FBcUIsS0FBSyxDQUExQjtBQUVBLFlBQU1PLFFBQVEsR0FBR1gsTUFBTSxDQUFDRSxHQUFHLENBQUNRLE9BQUwsRUFBY1IsR0FBZCxDQUF2Qjs7QUFDQSxVQUFJUyxRQUFRLFlBQVlDLE9BQXhCLEVBQWlDO0FBQy9CLGVBQU9ELFFBQVEsQ0FBQ0UsSUFBVCxDQUFlQyxDQUFELElBQU87QUFDMUJaLFVBQUFBLEdBQUcsQ0FBQ1MsUUFBSixHQUFlRyxDQUFmO0FBQ0EsaUJBQU9YLElBQUksRUFBWDtBQUNELFNBSE0sQ0FBUDtBQUlELE9BTEQsTUFLTztBQUNMRCxRQUFBQSxHQUFHLENBQUNTLFFBQUosR0FBZUEsUUFBZjtBQUNBLGVBQU9SLElBQUksRUFBWDtBQUNEO0FBQ0YsS0E1QkQ7QUE2QkQsR0E5QkQ7QUErQkQiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQ29weXJpZ2h0IChjKSAyMDE4IFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQG5vZmxvd1xuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUNsaWVudFJlbmRlclBsdWdpbihhcHApIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGNsaWVudFJlbmRlclBsdWdpbih7cmVuZGVyfSkge1xuICAgIHJldHVybiBmdW5jdGlvbiByZW5kZXJlcihjdHgsIG5leHQpIHtcbiAgICAgIGFwcC5yZW5kZXJTZXR1cEN0eCA9IGN0eDtcbiAgICAgIC8vIEVsZW1lbnQgd3JhcHBlcnMgc2hvdWxkIGJlIGFkZGVkIGluICpyZXZlcnNlKiB0b3BvbG9naWNhbCBvcmRlciBzbyB0aGF0XG4gICAgICAvLyB0aGUgcmVzdWx0aW5nIGVsZW1lbnQgdHJlZSBpcyBpbiB0b3BvbG9naWNhbCBvcmRlciBkdXJpbmcgcmVuZGVycy5cbiAgICAgIC8vIEZvciBleGFtcGxlLCBpZiBwbHVnaW4gQiBkZXBlbmRzIG9uIHBsdWdpbiBBLCB0aGUgdHJlZSBzaG91bGQgYmU6XG4gICAgICAvLyA8QVByb3ZpZGVyPlxuICAgICAgLy8gICA8QlByb3ZpZGVyPntyb290fTwvQlByb3ZpZGVyPlxuICAgICAgLy8gPC9BUFJvdmlkZXI+XG4gICAgICAvLyBJbiB0aGlzIGNhc2UsIEIgcHJvdmlkZXIgY2FuIGRlcGVuZCBvbiB0aGUgY29udGV4dCBvZiBBIHByb3ZpZGVyLlxuICAgICAgZm9yICh2YXIgaSA9IGFwcC5yZW5kZXJTZXR1cC5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICBjb25zdCB3cmFwcGVyID0gYXBwLnJlbmRlclNldHVwW2ldO1xuICAgICAgICBjb25zdCByZXN1bHQgPSB3cmFwcGVyKGN0eC5lbGVtZW50KTtcbiAgICAgICAgaWYgKHJlc3VsdCAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgY3R4LmVsZW1lbnQgPSByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGFwcC5yZW5kZXJTZXR1cEN0eCA9IHZvaWQgMDtcblxuICAgICAgY29uc3QgcmVuZGVyZWQgPSByZW5kZXIoY3R4LmVsZW1lbnQsIGN0eCk7XG4gICAgICBpZiAocmVuZGVyZWQgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgIHJldHVybiByZW5kZXJlZC50aGVuKChyKSA9PiB7XG4gICAgICAgICAgY3R4LnJlbmRlcmVkID0gcjtcbiAgICAgICAgICByZXR1cm4gbmV4dCgpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGN0eC5yZW5kZXJlZCA9IHJlbmRlcmVkO1xuICAgICAgICByZXR1cm4gbmV4dCgpO1xuICAgICAgfVxuICAgIH07XG4gIH07XG59XG4iXX0=