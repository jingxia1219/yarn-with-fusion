/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
import { createPlugin } from '../create-plugin';
import { memoize } from '../memoize';
import { createToken } from '../create-token';
import { now } from '../utils/now.js';

class Timing {
  constructor() {
    this.start = now();
    this.render = deferred();
    this.end = deferred();
    this.downstream = deferred();
    this.upstream = deferred();
    this.upstreamStart = -1;
    this.middleware = [];
    this.prepass = [];
    this.prepassMarked = false;
    this.prepassStart = -1;
  }

  markPrepass(pendingSize) {
    if (!this.prepassMarked) {
      this.prepassMarked = true;
      this.prepassStart = now();
    } else {
      this.prepass.push({
        duration: now() - this.prepassStart,
        pendingSize: pendingSize || 0
      });
      this.prepassMarked = false;
      this.prepassStart = -1;
    }
  }

}

const timing = {
  from: memoize(() => new Timing())
};
export const TimingToken = createToken('TimingToken');

function middleware(ctx, next) {
  ctx.memoized = new Map();
  const {
    start,
    render,
    end,
    downstream,
    upstream,
    middleware,
    prepass,
    markPrepass
  } = timing.from(ctx);
  ctx.timing = {
    start,
    render: render.promise,
    end: end.promise,
    downstream: downstream.promise,
    upstream: upstream.promise,
    middleware,
    prepass,
    markPrepass
  };
  return next().then(() => {
    const upstreamTime = now() - timing.from(ctx).upstreamStart;
    upstream.resolve(upstreamTime);
    const endTime = now() - ctx.timing.start;
    end.resolve(endTime);
  }).catch(e => {
    // currently we only resolve upstream and downstream when the request does not error
    // we should however always resolve the request end timing
    if (e && e.status) {
      // this ensures any logging / metrics based on ctx.status will recieve the correct status code
      ctx.status = e.status;
    }

    const endTime = now() - ctx.timing.start;
    end.resolve(endTime);
    throw e;
  });
}

export default createPlugin({
  provides: () => timing,
  middleware: () => middleware
});

function deferred() {
  let resolve = () => {};

  let reject = () => {};

  const promise = new Promise((res, rej) => {
    resolve = res;
    reject = rej;
  });
  return {
    promise,
    resolve,
    reject
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wbHVnaW5zL3RpbWluZy5qcyJdLCJuYW1lcyI6WyJjcmVhdGVQbHVnaW4iLCJtZW1vaXplIiwiY3JlYXRlVG9rZW4iLCJub3ciLCJUaW1pbmciLCJjb25zdHJ1Y3RvciIsInN0YXJ0IiwicmVuZGVyIiwiZGVmZXJyZWQiLCJlbmQiLCJkb3duc3RyZWFtIiwidXBzdHJlYW0iLCJ1cHN0cmVhbVN0YXJ0IiwibWlkZGxld2FyZSIsInByZXBhc3MiLCJwcmVwYXNzTWFya2VkIiwicHJlcGFzc1N0YXJ0IiwibWFya1ByZXBhc3MiLCJwZW5kaW5nU2l6ZSIsInB1c2giLCJkdXJhdGlvbiIsInRpbWluZyIsImZyb20iLCJUaW1pbmdUb2tlbiIsImN0eCIsIm5leHQiLCJtZW1vaXplZCIsIk1hcCIsInByb21pc2UiLCJ0aGVuIiwidXBzdHJlYW1UaW1lIiwicmVzb2x2ZSIsImVuZFRpbWUiLCJjYXRjaCIsImUiLCJzdGF0dXMiLCJwcm92aWRlcyIsInJlamVjdCIsIlByb21pc2UiLCJyZXMiLCJyZWoiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUUEsWUFBUixRQUEyQixrQkFBM0I7QUFDQSxTQUFRQyxPQUFSLFFBQXNCLFlBQXRCO0FBQ0EsU0FBUUMsV0FBUixRQUEwQixpQkFBMUI7QUFDQSxTQUFRQyxHQUFSLFFBQWtCLGlCQUFsQjs7QUFFQSxNQUFNQyxNQUFOLENBQWE7QUFDWEMsRUFBQUEsV0FBVyxHQUFHO0FBQ1osU0FBS0MsS0FBTCxHQUFhSCxHQUFHLEVBQWhCO0FBQ0EsU0FBS0ksTUFBTCxHQUFjQyxRQUFRLEVBQXRCO0FBQ0EsU0FBS0MsR0FBTCxHQUFXRCxRQUFRLEVBQW5CO0FBQ0EsU0FBS0UsVUFBTCxHQUFrQkYsUUFBUSxFQUExQjtBQUNBLFNBQUtHLFFBQUwsR0FBZ0JILFFBQVEsRUFBeEI7QUFDQSxTQUFLSSxhQUFMLEdBQXFCLENBQUMsQ0FBdEI7QUFDQSxTQUFLQyxVQUFMLEdB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U0FBU0wsUUFBVCxHQUFvQjtBQUNsQixNQUFJdUIsT0FBTyxHQUFHLE1BQU0sQ0FBRSxDQUF0Qjs7QUFDQSxNQUFJTSxNQUFNLEdBQUcsTUFBTSxDQUFFLENBQXJCOztBQUNBLFFBQU1ULE9BQU8sR0FBRyxJQUFJVSxPQUFKLENBQVksQ0FBQ0MsR0FBRCxFQUFNQyxHQUFOLEtBQWM7QUFDeENULElBQUFBLE9BQU8sR0FBR1EsR0FBVjtBQUNBRixJQUFBQSxNQUFNLEdBQUdHLEdBQVQ7QUFDRCxHQUhlLENBQWhCO0FBSUEsU0FBTztBQUNMWixJQUFBQSxPQURLO0FBRUxHLElBQUFBLE9BRks7QUFHTE0sSUFBQUE7QUFISyxHQUFQO0FBS0QiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQ29weXJpZ2h0IChjKSAyMDE4IFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQG5vZmxvd1xuICovXG5pbXBvcnQge2NyZWF0ZVBsdWdpbn0gZnJvbSAnLi4vY3JlYXRlLXBsdWdpbic7XG5pbXBvcnQge21lbW9pemV9IGZyb20gJy4uL21lbW9pemUnO1xuaW1wb3J0IHtjcmVhdGVUb2tlbn0gZnJvbSAnLi4vY3JlYXRlLXRva2VuJztcbmltcG9ydCB7bm93fSBmcm9tICcuLi91dGlscy9ub3cuanMnO1xuXG5jbGFzcyBUaW1pbmcge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnN0YXJ0ID0gbm93KCk7XG4gICAgdGhpcy5yZW5kZXIgPSBkZWZlcnJlZCgpO1xuICAgIHRoaXMuZW5kID0gZGVmZXJyZWQoKTtcbiAgICB0aGlzLmRvd25zdHJlYW0gPSBkZWZlcnJlZCgpO1xuICAgIHRoaXMudXBzdHJlYW0gPSBkZWZlcnJlZCgpO1xuICAgIHRoaXMudXBzdHJlYW1TdGFydCA9IC0xO1xuICAgIHRoaXMubWlkZGxld2FyZSA9IFtdO1xuICAgIHRoaXMucHJlcGFzcyA9IFtdO1xuICAgIHRoaXMucHJlcGFzc01hcmtlZCA9IGZhbHNlO1xuICAgIHRoaXMucHJlcGFzc1N0YXJ0ID0gLTE7XG4gIH1cblxuICBtYXJrUHJlcGFzcyhwZW5kaW5nU2l6ZSkge1xuICAgIGlmICghdGhpcy5wcmVwYXNzTWFya2VkKSB7XG4gICAgICB0aGlzLnByZXBhc3NNYXJrZWQgPSB0cnVlO1xuICAgICAgdGhpcy5wcmVwYXNzU3RhcnQgPSBub3coKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wcmVwYXNzLnB1c2goe1xuICAgICAgICBkdXJhdGlvbjogbm93KCkgLSB0aGlzLnByZXBhc3NTdGFydCxcbiAgICAgICAgcGVuZGluZ1NpemU6IHBlbmRpbmdTaXplIHx8IDAsXG4gICAgICB9KTtcbiAgICAgIHRoaXMucHJlcGFzc01hcmtlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5wcmVwYXNzU3RhcnQgPSAtMTtcbiAgICB9XG4gIH1cbn1cblxuY29uc3QgdGltaW5nID0ge1xuICBmcm9tOiBtZW1vaXplKCgpID0+IG5ldyBUaW1pbmcoKSksXG59O1xuXG5leHBvcnQgY29uc3QgVGltaW5nVG9rZW4gPSBjcmVhdGVUb2tlbignVGltaW5nVG9rZW4nKTtcblxuZnVuY3Rpb24gbWlkZGxld2FyZShjdHgsIG5leHQpIHtcbiAgY3R4Lm1lbW9pemVkID0gbmV3IE1hcCgpO1xuICBjb25zdCB7XG4gICAgc3RhcnQsXG4gICAgcmVuZGVyLFxuICAgIGVuZCxcbiAgICBkb3duc3RyZWFtLFxuICAgIHVwc3RyZWFtLFxuICAgIG1pZGRsZXdhcmUsXG4gICAgcHJlcGFzcyxcbiAgICBtYXJrUHJlcGFzcyxcbiAgfSA9IHRpbWluZy5mcm9tKGN0eCk7XG4gIGN0eC50aW1pbmcgPSB7XG4gICAgc3RhcnQsXG4gICAgcmVuZGVyOiByZW5kZXIucHJvbWlzZSxcbiAgICBlbmQ6IGVuZC5wcm9taXNlLFxuICAgIGRvd25zdHJlYW06IGRvd25zdHJlYW0ucHJvbWlzZSxcbiAgICB1cHN0cmVhbTogdXBzdHJlYW0ucHJvbWlzZSxcbiAgICBtaWRkbGV3YXJlLFxuICAgIHByZXBhc3MsXG4gICAgbWFya1ByZXBhc3MsXG4gIH07XG4gIHJldHVybiBuZXh0KClcbiAgICAudGhlbigoKSA9PiB7XG4gICAgICBjb25zdCB1cHN0cmVhbVRpbWUgPSBub3coKSAtIHRpbWluZy5mcm9tKGN0eCkudXBzdHJlYW1TdGFydDtcbiAgICAgIHVwc3RyZWFtLnJlc29sdmUodXBzdHJlYW1UaW1lKTtcbiAgICAgIGNvbnN0IGVuZFRpbWUgPSBub3coKSAtIGN0eC50aW1pbmcuc3RhcnQ7XG4gICAgICBlbmQucmVzb2x2ZShlbmRUaW1lKTtcbiAgICB9KVxuICAgIC5jYXRjaCgoZSkgPT4ge1xuICAgICAgLy8gY3VycmVudGx5IHdlIG9ubHkgcmVzb2x2ZSB1cHN0cmVhbSBhbmQgZG93bnN0cmVhbSB3aGVuIHRoZSByZXF1ZXN0IGRvZXMgbm90IGVycm9yXG4gICAgICAvLyB3ZSBzaG91bGQgaG93ZXZlciBhbHdheXMgcmVzb2x2ZSB0aGUgcmVxdWVzdCBlbmQgdGltaW5nXG4gICAgICBpZiAoZSAmJiBlLnN0YXR1cykge1xuICAgICAgICAvLyB0aGlzIGVuc3VyZXMgYW55IGxvZ2dpbmcgLyBtZXRyaWNzIGJhc2VkIG9uIGN0eC5zdGF0dXMgd2lsbCByZWNpZXZlIHRoZSBjb3JyZWN0IHN0YXR1cyBjb2RlXG4gICAgICAgIGN0eC5zdGF0dXMgPSBlLnN0YXR1cztcbiAgICAgIH1cbiAgICAgIGNvbnN0IGVuZFRpbWUgPSBub3coKSAtIGN0eC50aW1pbmcuc3RhcnQ7XG4gICAgICBlbmQucmVzb2x2ZShlbmRUaW1lKTtcbiAgICAgIHRocm93IGU7XG4gICAgfSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVBsdWdpbih7XG4gIHByb3ZpZGVzOiAoKSA9PiB0aW1pbmcsXG4gIG1pZGRsZXdhcmU6ICgpID0+IG1pZGRsZXdhcmUsXG59KTtcblxuZnVuY3Rpb24gZGVmZXJyZWQoKSB7XG4gIGxldCByZXNvbHZlID0gKCkgPT4ge307XG4gIGxldCByZWplY3QgPSAoKSA9PiB7fTtcbiAgY29uc3QgcHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXMsIHJlaikgPT4ge1xuICAgIHJlc29sdmUgPSByZXM7XG4gICAgcmVqZWN0ID0gcmVqO1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICBwcm9taXNlLFxuICAgIHJlc29sdmUsXG4gICAgcmVqZWN0LFxuICB9O1xufVxuIl19