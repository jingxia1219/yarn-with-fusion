/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

/* eslint-env node */
import { compose } from './compose.js';
import Timing, { TimingToken } from './plugins/timing';
import BaseApp from './base-app';
import serverRenderer from './plugins/server-renderer';
import { RenderToken, ElementToken, SSRDeciderToken, SSRBodyTemplateToken } from './tokens';
import ssrPlugin from './plugins/ssr';
import contextMiddleware from './plugins/server-context.js';
import { appSymbol } from './utils/app-symbol.js';
export default function () {
  const Koa = require('koa');

  return class ServerApp extends BaseApp {
    constructor(el, render) {
      super(el, render);
      this.endpoints = new Map();
      this._app = new Koa();
      this._app.proxy = true;
      this.middleware(contextMiddleware);
      this.middleware((ctx, next) => {
        ctx[appSymbol] = this;
        return next();
      });
      this.register(TimingToken, Timing);
      this.middleware((ctx, next) => {
        for (const [endpointPath, handler] of this.endpoints) {
          if (ctx.path === endpointPath) {
            return handler(ctx, next);
          }
        }

        return next();
      });
      this.middleware({
        element: ElementToken,
        ssrDecider: SSRDeciderToken,
        ssrBodyTemplate: SSRBodyTemplateToken.optional
      }, ssrPlugin(this.endpoints));
    }

    resolve() {
      this.middleware({
        timing: TimingToken,
        render: RenderToken
      }, serverRenderer(this));
      return super.resolve();
    }

    callback() {
      this.resolve();

      this._app.use(compose(this.plugins));

      return this._app.callback();
    }

  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9zZXJ2ZXItYXBwLmpzIl0sIm5hbWVzIjpbImNvbXBvc2UiLCJUaW1pbmciLCJUaW1pbmdUb2tlbiIsIkJhc2VBcHAiLCJzZXJ2ZXJSZW5kZXJlciIsIlJlbmRlclRva2VuIiwiRWxlbWVudFRva2VuIiwiU1NSRGVjaWRlclRva2VuIiwiU1NSQm9keVRlbXBsYXRlVG9rZW4iLCJzc3JQbHVnaW4iLCJjb250ZXh0TWlkZGxld2FyZSIsImFwcFN5bWJvbCIsIktvYSIsInJlcXVpcmUiLCJTZXJ2ZXJBcHAiLCJjb25zdHJ1Y3RvciIsImVsIiwicmVuZGVyIiwiZW5kcG9pbnRzIiwiTWFwIiwiX2FwcCIsInByb3h5IiwibWlkZGxld2FyZSIsImN0eCIsIm5leHQiLCJyZWdpc3RlciIsImVuZHBvaW50UGF0aCIsImhhbmRsZXIiLCJwYXRoIiwiZWxlbWVudCIsInNzckRlY2lkZXIiLCJzc3JCb2R5VGVtcGxhdGUiLCJvcHRpb25hbCIsInJlc29sdmUiLCJ0aW1pbmciLCJjYWxsYmFjayIsInVzZSIsInBsdWdpbnMiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0EsU0FBUUEsT0FBUixRQUFzQixjQUF0QjtBQUNBLE9BQU9DLE1BQVAsSUFBZ0JDLFdBQWhCLFFBQWtDLGtCQUFsQztBQUNBLE9BQU9DLE9BQVAsTUFBb0IsWUFBcEI7QUFDQSxPQUFPQyxjQUFQLE1BQTJCLDJCQUEzQjtBQUNBLFNBQ0VDLFdBREYsRUFFRUMsWUFGRixFQUdFQyxlQUhGLEVBSUVDLG9CQUpGLFFBS08sVUFMUDtBQU1BLE9BQU9DLFNBQVAsTUFBc0IsZUFBdEI7QUFDQSxPQUFPQyxpQkFBUCxNQUE4Qiw2QkFBOUI7QUFDQSxTQUFRQyxTQUFSLFFBQXdCLHVCQUF4QjtBQUVBLGVBQWUsWUFBWTtBQUN6QixRQUFNQyxHQUFHLEdBQUdDLE9BQU8sQ0FBQyxLQUFELENBQW5COztBQUVBLFNBQU8sTUFBTUMsU0FBTixTQUF3QlgsT0FBeEIsQ0FBZ0M7QUFDckNZLElBQUFBLFdBQVcsQ0FBQ0MsRUFBRCxFQUFLQyxNQUFMLEVBQWE7QUFDdEIsWUFBTUQsRUFBTixFQUFVQyxNQUFWO0FBQ0EsV0FBS0MsU0FBTCxHQUFpQixJQUFJQyxHQUFKLEVBQWpCO0FBQ0EsV0FBS0MsSUFBTCxHQUFZLElBQUlSLEdBQUosRUFBWjtBQUNBLFdBQUtRLElBQUwsQ0FBVUMsS0FBVixHQUFrQixJQUFsQjtBQUNBLFdBQUtDLFVBQUwsQ0FBZ0JaLGlCQUFoQjtBQUNBLFdBQUtZLFVBQUwsQ0FBZ0IsQ0FBQ0MsR0FBRCxFQUFNQyxJQUFOLEtBQWU7QUFDN0JELFFBQUFBLEdBQUcsQ0FBQ1osU0FBRCxDQUFILEdBQWlCLElBQWpCO0FBQ0EsZUFBT2EsSUFBSSxFQUFYO0FBQ0QsT0FIRDtBQUlBLFdBQUtDLFFBQUwsQ0FBY3ZCLFdBQWQsRUFBMkJELE1BQTNCO0FBQ0EsV0FBS3FCLFVBQUwsQ0FBZ0IsQ0FBQ0MsR0FBRCxFQUFNQyxJQUFOLEtBQWU7QUFDN0IsYUFBSyxNQUFNLENBQUNFLFlBQUQsRUFBZUMsT0FBZixDQUFYLElBQXNDLEtBQUtULFNBQTNDLEVBQXNEO0FBQ3BELGNBQUlLLEdBQUcsQ0FBQ0ssSUFBSixLQUFhRixZQUFqQixFQUErQjtBQUM3QixtQkFBT0MsT0FBTyxDQUFDSixHQUFELEVBQU1DLElBQU4sQ0FBZDtBQUNEO0FBQ0Y7O0FBQ0QsZUFBT0EsSUFBSSxFQUFYO0FBQ0QsT0FQRDtBQVFBLFdBQUtGLFVBQUwsQ0FDRTtBQUNFTyxRQUFBQSxPQUFPLEVBQUV2QixZQURYO0FBRUV3QixRQUFBQSxVQUFVLEVBQUV2QixlQUZkO0FBR0V3QixRQUFBQSxlQUFlLEVBQUV2QixvQkFBb0IsQ0FBQ3dCO0FBSHhDLE9BREYsRUFNRXZCLFNBQVMsQ0FBQyxLQUFLUyxTQUFOLENBTlg7QUFRRDs7QUFDRGUsSUFBQUEsT0FBTyxHQUFHO0FBQ1IsV0FBS1gsVUFBTCxDQUNFO0FBQUNZLFFBQUFBLE1BQU0sRUFBRWhDLFdBQVQ7QUFBc0JlLFFBQUFBLE1BQU0sRUFBRVo7QUFBOUIsT0FERixFQUVFRCxjQUFjLENBQUMsSUFBRCxDQUZoQjtBQUlBLGFBQU8sTUFBTTZCLE9BQU4sRUFBUDtBQUNEOztBQUNERSxJQUFBQSxRQUFRLEdBQUc7QUFDVCxXQUFLRixPQUFMOztBQUNBLFdBQUtiLElBQUwsQ0FBVWdCLEdBQVYsQ0FBY3BDLE9BQU8sQ0FBQyxLQUFLcUMsT0FBTixDQUFyQjs7QUFDQSxhQUFPLEtBQUtqQixJQUFMLENBQVVlLFFBQVYsRUFBUDtBQUNEOztBQXhDb0MsR0FBdkM7QUEwQ0QiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQ29weXJpZ2h0IChjKSAyMDE4IFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQG5vZmxvd1xuICovXG4vKiBlc2xpbnQtZW52IG5vZGUgKi9cbmltcG9ydCB7Y29tcG9zZX0gZnJvbSAnLi9jb21wb3NlLmpzJztcbmltcG9ydCBUaW1pbmcsIHtUaW1pbmdUb2tlbn0gZnJvbSAnLi9wbHVnaW5zL3RpbWluZyc7XG5pbXBvcnQgQmFzZUFwcCBmcm9tICcuL2Jhc2UtYXBwJztcbmltcG9ydCBzZXJ2ZXJSZW5kZXJlciBmcm9tICcuL3BsdWdpbnMvc2VydmVyLXJlbmRlcmVyJztcbmltcG9ydCB7XG4gIFJlbmRlclRva2VuLFxuICBFbGVtZW50VG9rZW4sXG4gIFNTUkRlY2lkZXJUb2tlbixcbiAgU1NSQm9keVRlbXBsYXRlVG9rZW4sXG59IGZyb20gJy4vdG9rZW5zJztcbmltcG9ydCBzc3JQbHVnaW4gZnJvbSAnLi9wbHVnaW5zL3Nzcic7XG5pbXBvcnQgY29udGV4dE1pZGRsZXdhcmUgZnJvbSAnLi9wbHVnaW5zL3NlcnZlci1jb250ZXh0LmpzJztcbmltcG9ydCB7YXBwU3ltYm9sfSBmcm9tICcuL3V0aWxzL2FwcC1zeW1ib2wuanMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IEtvYSA9IHJlcXVpcmUoJ2tvYScpO1xuXG4gIHJldHVybiBjbGFzcyBTZXJ2ZXJBcHAgZXh0ZW5kcyBCYXNlQXBwIHtcbiAgICBjb25zdHJ1Y3RvcihlbCwgcmVuZGVyKSB7XG4gICAgICBzdXBlcihlbCwgcmVuZGVyKTtcbiAgICAgIHRoaXMuZW5kcG9pbnRzID0gbmV3IE1hcCgpO1xuICAgICAgdGhpcy5fYXBwID0gbmV3IEtvYSgpO1xuICAgICAgdGhpcy5fYXBwLnByb3h5ID0gdHJ1ZTtcbiAgICAgIHRoaXMubWlkZGxld2FyZShjb250ZXh0TWlkZGxld2FyZSk7XG4gICAgICB0aGlzLm1pZGRsZXdhcmUoKGN0eCwgbmV4dCkgPT4ge1xuICAgICAgICBjdHhbYXBwU3ltYm9sXSA9IHRoaXM7XG4gICAgICAgIHJldHVybiBuZXh0KCk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMucmVnaXN0ZXIoVGltaW5nVG9rZW4sIFRpbWluZyk7XG4gICAgICB0aGlzLm1pZGRsZXdhcmUoKGN0eCwgbmV4dCkgPT4ge1xuICAgICAgICBmb3IgKGNvbnN0IFtlbmRwb2ludFBhdGgsIGhhbmRsZXJdIG9mIHRoaXMuZW5kcG9pbnRzKSB7XG4gICAgICAgICAgaWYgKGN0eC5wYXRoID09PSBlbmRwb2ludFBhdGgpIHtcbiAgICAgICAgICAgIHJldHVybiBoYW5kbGVyKGN0eCwgbmV4dCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXh0KCk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMubWlkZGxld2FyZShcbiAgICAgICAge1xuICAgICAgICAgIGVsZW1lbnQ6IEVsZW1lbnRUb2tlbixcbiAgICAgICAgICBzc3JEZWNpZGVyOiBTU1JEZWNpZGVyVG9rZW4sXG4gICAgICAgICAgc3NyQm9keVRlbXBsYXRlOiBTU1JCb2R5VGVtcGxhdGVUb2tlbi5vcHRpb25hbCxcbiAgICAgICAgfSxcbiAgICAgICAgc3NyUGx1Z2luKHRoaXMuZW5kcG9pbnRzKVxuICAgICAgKTtcbiAgICB9XG4gICAgcmVzb2x2ZSgpIHtcbiAgICAgIHRoaXMubWlkZGxld2FyZShcbiAgICAgICAge3RpbWluZzogVGltaW5nVG9rZW4sIHJlbmRlcjogUmVuZGVyVG9rZW59LFxuICAgICAgICBzZXJ2ZXJSZW5kZXJlcih0aGlzKVxuICAgICAgKTtcbiAgICAgIHJldHVybiBzdXBlci5yZXNvbHZlKCk7XG4gICAgfVxuICAgIGNhbGxiYWNrKCkge1xuICAgICAgdGhpcy5yZXNvbHZlKCk7XG4gICAgICB0aGlzLl9hcHAudXNlKGNvbXBvc2UodGhpcy5wbHVnaW5zKSk7XG4gICAgICByZXR1cm4gdGhpcy5fYXBwLmNhbGxiYWNrKCk7XG4gICAgfVxuICB9O1xufVxuIl19