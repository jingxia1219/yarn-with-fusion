/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

/* eslint-env node */
import assert from 'assert';

function load(key, value) {
  return process.env[key] || value;
}

export function loadEnv() {
  const rootDir = load('ROOT_DIR', '.');
  const env = load('NODE_ENV', 'development');

  if (!(env === 'development' || env === 'production' || env === 'test')) {
    throw new Error(`Invalid NODE_ENV loaded: ${env}.`);
  }

  const prefix = load('ROUTE_PREFIX', '');
  assert(!prefix.endsWith('/'), 'ROUTE_PREFIX must not end with /');
  const baseAssetPath = load('FRAMEWORK_STATIC_ASSET_PATH', `/_static`);
  assert(!baseAssetPath.endsWith('/'), 'FRAMEWORK_STATIC_ASSET_PATH must not end with /');
  const cdnUrl = load('CDN_URL', '');
  assert(!cdnUrl.endsWith('/'), 'CDN_URL must not end with /');
  const dangerouslyExposeSourceMaps = load('DANGEROUSLY_EXPOSE_SOURCE_MAPS', 'false');
  const assetPath = `${prefix}${baseAssetPath}`;
  return function loadEnv() {
    return {
      rootDir,
      env,
      prefix,
      assetPath,
      baseAssetPath,
      cdnUrl,
      webpackPublicPath: cdnUrl || assetPath,
      dangerouslyExposeSourceMaps: dangerouslyExposeSourceMaps === 'true'
    };
  };
}
export default true ? () => {} : loadEnv();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9nZXQtZW52LmpzIl0sIm5hbWVzIjpbImFzc2VydCIsImxvYWQiLCJrZXkiLCJ2YWx1ZSIsInByb2Nlc3MiLCJlbnYiLCJsb2FkRW52Iiwicm9vdERpciIsIkVycm9yIiwicHJlZml4IiwiZW5kc1dpdGgiLCJiYXNlQXNzZXRQYXRoIiwiY2RuVXJsIiwiZGFuZ2Vyb3VzbHlFeHBvc2VTb3VyY2VNYXBzIiwiYXNzZXRQYXRoIiwid2VicGFja1B1YmxpY1BhdGgiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0EsT0FBT0EsTUFBUCxNQUFtQixRQUFuQjs7QUFFQSxTQUFTQyxJQUFULENBQWNDLEdBQWQsRUFBbUJDLEtBQW5CLEVBQTBCO0FBQ3hCLFNBQU9DLE9BQU8sQ0FBQ0MsR0FBUixDQUFZSCxHQUFaLEtBQW9CQyxLQUEzQjtBQUNEOztBQUVELE9BQU8sU0FBU0csT0FBVCxHQUFtQjtBQUN4QixRQUFNQyxPQUFPLEdBQUdOLElBQUksQ0FBQyxVQUFELEVBQWEsR0FBYixDQUFwQjtBQUNBLFFBQU1JLEdBQUcsR0FBR0osSUFBSSxDQUFDLFVBQUQsRUFBYSxhQUFiLENBQWhCOztBQUNBLE1BQUksRUFBRUksR0FBRyxLQUFLLGFBQVIsSUFBeUJBLEdBQUcsS0FBSyxZQUFqQyxJQUFpREEsR0FBRyxLQUFLLE1BQTNELENBQUosRUFBd0U7QUFDdEUsVUFBTSxJQUFJRyxLQUFKLENBQVcsNEJBQTJCSCxHQUFJLEdBQTFDLENBQU47QUFDRDs7QUFDRCxRQUFNSSxNQUFNLEdBQUdSLElBQUksQ0FBQyxjQUFELEVBQWlCLEVBQWpCLENBQW5CO0FBQ0FELEVBQUFBLE1BQU0sQ0FBQyxDQUFDUyxNQUFNLENBQUNDLFFBQVAsQ0FBZ0IsR0FBaEIsQ0FBRixFQUF3QixrQ0FBeEIsQ0FBTjtBQUNBLFFBQU1DLGFBQWEsR0FBR1YsSUFBSSxDQUFDLDZCQUFELEVBQWlDLFVBQWpDLENBQTFCO0FBQ0FELEVBQUFBLE1BQU0sQ0FDSixDQUFDVyxhQUFhLENBQUNELFFBQWQsQ0FBdUIsR0FBdkIsQ0FERyxFQUVKLGlEQUZJLENBQU47QUFJQSxRQUFNRSxNQUFNLEdBQUdYLElBQUksQ0FBQyxTQUFELEVBQVksRUFBWixDQUFuQjtBQUNBRCxFQUFBQSxNQUFNLENBQUMsQ0FBQ1ksTUFBTSxDQUFDRixRQUFQLENBQWdCLEdBQWhCLENBQUYsRUFBd0IsNkJBQXhCLENBQU47QUFDQSxRQUFNRywyQkFBMkIsR0FBR1osSUFBSSxDQUN0QyxnQ0FEc0MsRUFFdEMsT0FGc0MsQ0FBeEM7QUFLQSxRQUFNYSxTQUFTLEdBQUksR0FBRUwsTUFBTyxHQUFFRSxhQUFjLEVBQTVDO0FBQ0EsU0FBTyxTQUFTTCxPQUFULEdBQW1CO0FBQ3hCLFdBQU87QUFDTEMsTUFBQUEsT0FESztBQUVMRixNQUFBQSxHQUZLO0FBR0xJLE1BQUFBLE1BSEs7QUFJTEssTUFBQUEsU0FKSztBQUtMSCxNQUFBQSxhQUxLO0FBTUxDLE1BQUFBLE1BTks7QUFPTEcsTUFBQUEsaUJBQWlCLEVBQUVILE1BQU0sSUFBSUUsU0FQeEI7QUFRTEQsTUFBQUEsMkJBQTJCLEVBQUVBLDJCQUEyQixLQUFLO0FBUnhELEtBQVA7QUFVRCxHQVhEO0FBWUQ7QUFFRCxlQUFlLE9BQWMsTUFBTSxDQUFFLENBQXRCLEdBQXlCUCxPQUFPLEVBQS9DIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIENvcHlyaWdodCAoYykgMjAxOCBVYmVyIFRlY2hub2xvZ2llcywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBub2Zsb3dcbiAqL1xuLyogZXNsaW50LWVudiBub2RlICovXG5pbXBvcnQgYXNzZXJ0IGZyb20gJ2Fzc2VydCc7XG5cbmZ1bmN0aW9uIGxvYWQoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gcHJvY2Vzcy5lbnZba2V5XSB8fCB2YWx1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRFbnYoKSB7XG4gIGNvbnN0IHJvb3REaXIgPSBsb2FkKCdST09UX0RJUicsICcuJyk7XG4gIGNvbnN0IGVudiA9IGxvYWQoJ05PREVfRU5WJywgJ2RldmVsb3BtZW50Jyk7XG4gIGlmICghKGVudiA9PT0gJ2RldmVsb3BtZW50JyB8fCBlbnYgPT09ICdwcm9kdWN0aW9uJyB8fCBlbnYgPT09ICd0ZXN0JykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgTk9ERV9FTlYgbG9hZGVkOiAke2Vudn0uYCk7XG4gIH1cbiAgY29uc3QgcHJlZml4ID0gbG9hZCgnUk9VVEVfUFJFRklYJywgJycpO1xuICBhc3NlcnQoIXByZWZpeC5lbmRzV2l0aCgnLycpLCAnUk9VVEVfUFJFRklYIG11c3Qgbm90IGVuZCB3aXRoIC8nKTtcbiAgY29uc3QgYmFzZUFzc2V0UGF0aCA9IGxvYWQoJ0ZSQU1FV09SS19TVEFUSUNfQVNTRVRfUEFUSCcsIGAvX3N0YXRpY2ApO1xuICBhc3NlcnQoXG4gICAgIWJhc2VBc3NldFBhdGguZW5kc1dpdGgoJy8nKSxcbiAgICAnRlJBTUVXT1JLX1NUQVRJQ19BU1NFVF9QQVRIIG11c3Qgbm90IGVuZCB3aXRoIC8nXG4gICk7XG4gIGNvbnN0IGNkblVybCA9IGxvYWQoJ0NETl9VUkwnLCAnJyk7XG4gIGFzc2VydCghY2RuVXJsLmVuZHNXaXRoKCcvJyksICdDRE5fVVJMIG11c3Qgbm90IGVuZCB3aXRoIC8nKTtcbiAgY29uc3QgZGFuZ2Vyb3VzbHlFeHBvc2VTb3VyY2VNYXBzID0gbG9hZChcbiAgICAnREFOR0VST1VTTFlfRVhQT1NFX1NPVVJDRV9NQVBTJyxcbiAgICAnZmFsc2UnXG4gICk7XG5cbiAgY29uc3QgYXNzZXRQYXRoID0gYCR7cHJlZml4fSR7YmFzZUFzc2V0UGF0aH1gO1xuICByZXR1cm4gZnVuY3Rpb24gbG9hZEVudigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcm9vdERpcixcbiAgICAgIGVudixcbiAgICAgIHByZWZpeCxcbiAgICAgIGFzc2V0UGF0aCxcbiAgICAgIGJhc2VBc3NldFBhdGgsXG4gICAgICBjZG5VcmwsXG4gICAgICB3ZWJwYWNrUHVibGljUGF0aDogY2RuVXJsIHx8IGFzc2V0UGF0aCxcbiAgICAgIGRhbmdlcm91c2x5RXhwb3NlU291cmNlTWFwczogZGFuZ2Vyb3VzbHlFeHBvc2VTb3VyY2VNYXBzID09PSAndHJ1ZScsXG4gICAgfTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgX19CUk9XU0VSX18gPyAoKSA9PiB7fSA6IGxvYWRFbnYoKTtcbiJdfQ==