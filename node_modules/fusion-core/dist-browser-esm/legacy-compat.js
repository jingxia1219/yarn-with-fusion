import { withDeps, withUniversalMiddleware, withCleanup } from './core.js';
import { declarePlugin } from './create-plugin.js';
import { getTokenRef } from './create-token.js';
export function createPlugin(opts) {
  function* LegacyPlugin() {
    let resolvedDeps = {};
    const depKeys = opts.deps ? Object.keys(opts.deps) : [];

    if (depKeys.length) {
      const deps = yield withDeps(depKeys.map(key => opts.deps[key]));
      deps.forEach((dep, i) => {
        resolvedDeps[depKeys[i]] = dep;
      });
    }

    let providedValue;

    if (opts.provides) {
      providedValue = opts.provides(resolvedDeps);
    }

    if (opts.middleware) {
      let legacyMiddleware = opts.middleware(resolvedDeps, providedValue);
      withUniversalMiddleware(legacyMiddleware);
    }

    if (opts.cleanup && typeof opts.cleanup === 'function') {
      withCleanup(() => {
        opts.cleanup(providedValue);
      });
    }

    return providedValue;
  }

  return declarePlugin(LegacyPlugin);
} // The core implementation yields a topological order of middleware, however
// it differs from the old implementation. In order to maintain compatibility
// with existing apps, we should sort this in the same way

export function sortLegacy(app) {
  let legacySorted = [];
  const seen = new Set();

  function visit(task) {
    if (seen.has(task)) {
      return;
    }

    seen.add(task);
    let requested = new Set(task.requested);

    for (let t of app.taskMap.values()) {
      if (requested.has(getTokenRef(t.id))) {
        visit(t);
      }
    }

    if (task.child) {
      visit(task.child);
    }

    if (task.middleware) {
      legacySorted.push(task.middleware);
    }

    if (app.enhancerChainTails.has(getTokenRef(task.id))) {
      visit(app.taskMap.get(app.enhancerChainTails.get(getTokenRef(task.id))));
    }
  }

  for (let task of app.taskMap.values()) {
    if (!app.enhancerTokens.has(task.id)) {
      visit(task);
    }
  }

  app.plugins = legacySorted;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9sZWdhY3ktY29tcGF0LmpzIl0sIm5hbWVzIjpbIndpdGhEZXBzIiwid2l0aFVuaXZlcnNhbE1pZGRsZXdhcmUiLCJ3aXRoQ2xlYW51cCIsImRlY2xhcmVQbHVnaW4iLCJnZXRUb2tlblJlZiIsImNyZWF0ZVBsdWdpbiIsIm9wdHMiLCJMZWdhY3lQbHVnaW4iLCJyZXNvbHZlZERlcHMiLCJkZXBLZXlzIiwiZGVwcyIsIk9iamVjdCIsImtleXMiLCJsZW5ndGgiLCJtYXAiLCJrZXkiLCJmb3JFYWNoIiwiZGVwIiwiaSIsInByb3ZpZGVkVmFsdWUiLCJwcm92aWRlcyIsIm1pZGRsZXdhcmUiLCJsZWdhY3lNaWRkbGV3YXJlIiwiY2xlYW51cCIsInNvcnRMZWdhY3kiLCJhcHAiLCJsZWdhY3lTb3J0ZWQiLCJzZWVuIiwiU2V0IiwidmlzaXQiLCJ0YXNrIiwiaGFzIiwiYWRkIiwicmVxdWVzdGVkIiwidCIsInRhc2tNYXAiLCJ2YWx1ZXMiLCJpZCIsImNoaWxkIiwicHVzaCIsImVuaGFuY2VyQ2hhaW5UYWlscyIsImdldCIsImVuaGFuY2VyVG9rZW5zIiwicGx1Z2lucyJdLCJtYXBwaW5ncyI6IkFBQ0EsU0FBUUEsUUFBUixFQUFrQkMsdUJBQWxCLEVBQTJDQyxXQUEzQyxRQUE2RCxXQUE3RDtBQUNBLFNBQVFDLGFBQVIsUUFBNEIsb0JBQTVCO0FBRUEsU0FBUUMsV0FBUixRQUEwQixtQkFBMUI7QUFFQSxPQUFPLFNBQVNDLFlBQVQsQ0FBc0JDLElBQXRCLEVBQTRCO0FBQ2pDLFlBQVVDLFlBQVYsR0FBeUI7QUFDdkIsUUFBSUMsWUFBWSxHQUFHLEVBQW5CO0FBQ0EsVUFBTUMsT0FBTyxHQUFHSCxJQUFJLENBQUNJLElBQUwsR0FBWUMsTUFBTSxDQUFDQyxJQUFQLENBQVlOLElBQUksQ0FBQ0ksSUFBakIsQ0FBWixHQUFxQyxFQUFyRDs7QUFDQSxRQUFJRCxPQUFPLENBQUNJLE1BQVosRUFBb0I7QUFDbEIsWUFBTUgsSUFBSSxHQUFHLE1BQU1WLFFBQVEsQ0FBQ1MsT0FBTyxDQUFDSyxHQUFSLENBQWFDLEdBQUQsSUFBU1QsSUFBSSxDQUFDSSxJQUFMLENBQVVLLEdBQVYsQ0FBckIsQ0FBRCxDQUEzQjtBQUNBTCxNQUFBQSxJQUFJLENBQUNNLE9BQUwsQ0FBYSxDQUFDQyxHQUFELEVBQU1DLENBQU4sS0FBWTtBQUN2QlYsUUFBQUEsWUFBWSxDQUFDQyxPQUFPLENBQUNTLENBQUQsQ0FBUixDQUFaLEdBQTJCRCxHQUEzQjtBQUNELE9BRkQ7QUFHRDs7QUFDRCxRQUFJRSxhQUFKOztBQUNBLFFBQUliLElBQUksQ0FBQ2MsUUFBVCxFQUFtQjtBQUNqQkQsTUFBQUEsYUFBYSxHQUFHYixJQUFJLENBQUNjLFFBQUwsQ0FBY1osWUFBZCxDQUFoQjtBQUNEOztBQUNELFFBQUlGLElBQUksQ0FBQ2UsVUFBVCxFQUFxQjtBQUNuQixVQUFJQyxnQkFBZ0IsR0FBR2hCLElBQUksQ0FBQ2UsVUFBTCxDQUFnQmIsWUFBaEIsRUFBOEJXLGFBQTlCLENBQXZCO0FBQ0FsQixNQUFBQSx1QkFBdUIsQ0FBQ3FCLGdCQUFELENBQXZCO0FBQ0Q7O0FBQ0QsUUFBSWhCLElBQUksQ0FBQ2lCLE9BQUwsSUFBZ0IsT0FBT2pCLElBQUksQ0FBQ2lCLE9BQVosS0FBd0IsVUFBNUMsRUFBd0Q7QUFDdERyQixNQUFBQSxXQUFXLENBQUMsTUFBTTtBQUNoQkksUUFBQUEsSUFBSSxDQUFDaUIsT0FBTCxDQUFhSixhQUFiO0FBQ0QsT0FGVSxDQUFYO0FBR0Q7O0FBQ0QsV0FBT0EsYUFBUDtBQUNEOztBQUVELFNBQU9oQixhQUFhLENBQUNJLFlBQUQsQ0FBcEI7QUFDRCxDLENBRUQ7QUFDQTtBQUNBOztBQUNBLE9BQU8sU0FBU2lCLFVBQVQsQ0FBb0JDLEdBQXBCLEVBQXlCO0FBQzlCLE1BQUlDLFlBQVksR0FBRyxFQUFuQjtBQUVBLFFBQU1DLElBQUksR0FBRyxJQUFJQyxHQUFKLEVBQWI7O0FBQ0EsV0FBU0MsS0FBVCxDQUFlQyxJQUFmLEVBQXFCO0FBQ25CLFFBQUlILElBQUksQ0FBQ0ksR0FBTCxDQUFTRCxJQUFULENBQUosRUFBb0I7QUFDbEI7QUFDRDs7QUFDREgsSUFBQUEsSUFBSSxDQUFDSyxHQUFMLENBQVNGLElBQVQ7QUFDQSxRQUFJRyxTQUFTLEdBQUcsSUFBSUwsR0FBSixDQUFRRSxJQUFJLENBQUNHLFNBQWIsQ0FBaEI7O0FBQ0EsU0FBSyxJQUFJQyxDQUFULElBQWNULEdBQUcsQ0FBQ1UsT0FBSixDQUFZQyxNQUFaLEVBQWQsRUFBb0M7QUFDbEMsVUFBSUgsU0FBUyxDQUFDRixHQUFWLENBQWMzQixXQUFXLENBQUM4QixDQUFDLENBQUNHLEVBQUgsQ0FBekIsQ0FBSixFQUFzQztBQUNwQ1IsUUFBQUEsS0FBSyxDQUFDSyxDQUFELENBQUw7QUFDRDtBQUNGOztBQUNELFFBQUlKLElBQUksQ0FBQ1EsS0FBVCxFQUFnQjtBQUNkVCxNQUFBQSxLQUFLLENBQUNDLElBQUksQ0FBQ1EsS0FBTixDQUFMO0FBQ0Q7O0FBRUQsUUFBSVIsSUFBSSxDQUFDVCxVQUFULEVBQXFCO0FBQ25CSyxNQUFBQSxZQUFZLENBQUNhLElBQWIsQ0FBa0JULElBQUksQ0FBQ1QsVUFBdkI7QUFDRDs7QUFFRCxRQUFJSSxHQUFHLENBQUNlLGtCQUFKLENBQXVCVCxHQUF2QixDQUEyQjNCLFdBQVcsQ0FBQzBCLElBQUksQ0FBQ08sRUFBTixDQUF0QyxDQUFKLEVBQXNEO0FBQ3BEUixNQUFBQSxLQUFLLENBQUNKLEdBQUcsQ0FBQ1UsT0FBSixDQUFZTSxHQUFaLENBQWdCaEIsR0FBRyxDQUFDZSxrQkFBSixDQUF1QkMsR0FBdkIsQ0FBMkJyQyxXQUFXLENBQUMwQixJQUFJLENBQUNPLEVBQU4sQ0FBdEMsQ0FBaEIsQ0FBRCxDQUFMO0FBQ0Q7QUFDRjs7QUFFRCxPQUFLLElBQUlQLElBQVQsSUFBaUJMLEdBQUcsQ0FBQ1UsT0FBSixDQUFZQyxNQUFaLEVBQWpCLEVBQXVDO0FBQ3JDLFFBQUksQ0FBQ1gsR0FBRyxDQUFDaUIsY0FBSixDQUFtQlgsR0FBbkIsQ0FBdUJELElBQUksQ0FBQ08sRUFBNUIsQ0FBTCxFQUFzQztBQUNwQ1IsTUFBQUEsS0FBSyxDQUFDQyxJQUFELENBQUw7QUFDRDtBQUNGOztBQUVETCxFQUFBQSxHQUFHLENBQUNrQixPQUFKLEdBQWNqQixZQUFkO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAbm9mbG93XG5pbXBvcnQge3dpdGhEZXBzLCB3aXRoVW5pdmVyc2FsTWlkZGxld2FyZSwgd2l0aENsZWFudXB9IGZyb20gJy4vY29yZS5qcyc7XG5pbXBvcnQge2RlY2xhcmVQbHVnaW59IGZyb20gJy4vY3JlYXRlLXBsdWdpbi5qcyc7XG5cbmltcG9ydCB7Z2V0VG9rZW5SZWZ9IGZyb20gJy4vY3JlYXRlLXRva2VuLmpzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVBsdWdpbihvcHRzKSB7XG4gIGZ1bmN0aW9uKiBMZWdhY3lQbHVnaW4oKSB7XG4gICAgbGV0IHJlc29sdmVkRGVwcyA9IHt9O1xuICAgIGNvbnN0IGRlcEtleXMgPSBvcHRzLmRlcHMgPyBPYmplY3Qua2V5cyhvcHRzLmRlcHMpIDogW107XG4gICAgaWYgKGRlcEtleXMubGVuZ3RoKSB7XG4gICAgICBjb25zdCBkZXBzID0geWllbGQgd2l0aERlcHMoZGVwS2V5cy5tYXAoKGtleSkgPT4gb3B0cy5kZXBzW2tleV0pKTtcbiAgICAgIGRlcHMuZm9yRWFjaCgoZGVwLCBpKSA9PiB7XG4gICAgICAgIHJlc29sdmVkRGVwc1tkZXBLZXlzW2ldXSA9IGRlcDtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBsZXQgcHJvdmlkZWRWYWx1ZTtcbiAgICBpZiAob3B0cy5wcm92aWRlcykge1xuICAgICAgcHJvdmlkZWRWYWx1ZSA9IG9wdHMucHJvdmlkZXMocmVzb2x2ZWREZXBzKTtcbiAgICB9XG4gICAgaWYgKG9wdHMubWlkZGxld2FyZSkge1xuICAgICAgbGV0IGxlZ2FjeU1pZGRsZXdhcmUgPSBvcHRzLm1pZGRsZXdhcmUocmVzb2x2ZWREZXBzLCBwcm92aWRlZFZhbHVlKTtcbiAgICAgIHdpdGhVbml2ZXJzYWxNaWRkbGV3YXJlKGxlZ2FjeU1pZGRsZXdhcmUpO1xuICAgIH1cbiAgICBpZiAob3B0cy5jbGVhbnVwICYmIHR5cGVvZiBvcHRzLmNsZWFudXAgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHdpdGhDbGVhbnVwKCgpID0+IHtcbiAgICAgICAgb3B0cy5jbGVhbnVwKHByb3ZpZGVkVmFsdWUpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBwcm92aWRlZFZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIGRlY2xhcmVQbHVnaW4oTGVnYWN5UGx1Z2luKTtcbn1cblxuLy8gVGhlIGNvcmUgaW1wbGVtZW50YXRpb24geWllbGRzIGEgdG9wb2xvZ2ljYWwgb3JkZXIgb2YgbWlkZGxld2FyZSwgaG93ZXZlclxuLy8gaXQgZGlmZmVycyBmcm9tIHRoZSBvbGQgaW1wbGVtZW50YXRpb24uIEluIG9yZGVyIHRvIG1haW50YWluIGNvbXBhdGliaWxpdHlcbi8vIHdpdGggZXhpc3RpbmcgYXBwcywgd2Ugc2hvdWxkIHNvcnQgdGhpcyBpbiB0aGUgc2FtZSB3YXlcbmV4cG9ydCBmdW5jdGlvbiBzb3J0TGVnYWN5KGFwcCkge1xuICBsZXQgbGVnYWN5U29ydGVkID0gW107XG5cbiAgY29uc3Qgc2VlbiA9IG5ldyBTZXQoKTtcbiAgZnVuY3Rpb24gdmlzaXQodGFzaykge1xuICAgIGlmIChzZWVuLmhhcyh0YXNrKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzZWVuLmFkZCh0YXNrKTtcbiAgICBsZXQgcmVxdWVzdGVkID0gbmV3IFNldCh0YXNrLnJlcXVlc3RlZCk7XG4gICAgZm9yIChsZXQgdCBvZiBhcHAudGFza01hcC52YWx1ZXMoKSkge1xuICAgICAgaWYgKHJlcXVlc3RlZC5oYXMoZ2V0VG9rZW5SZWYodC5pZCkpKSB7XG4gICAgICAgIHZpc2l0KHQpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodGFzay5jaGlsZCkge1xuICAgICAgdmlzaXQodGFzay5jaGlsZCk7XG4gICAgfVxuXG4gICAgaWYgKHRhc2subWlkZGxld2FyZSkge1xuICAgICAgbGVnYWN5U29ydGVkLnB1c2godGFzay5taWRkbGV3YXJlKTtcbiAgICB9XG5cbiAgICBpZiAoYXBwLmVuaGFuY2VyQ2hhaW5UYWlscy5oYXMoZ2V0VG9rZW5SZWYodGFzay5pZCkpKSB7XG4gICAgICB2aXNpdChhcHAudGFza01hcC5nZXQoYXBwLmVuaGFuY2VyQ2hhaW5UYWlscy5nZXQoZ2V0VG9rZW5SZWYodGFzay5pZCkpKSk7XG4gICAgfVxuICB9XG5cbiAgZm9yIChsZXQgdGFzayBvZiBhcHAudGFza01hcC52YWx1ZXMoKSkge1xuICAgIGlmICghYXBwLmVuaGFuY2VyVG9rZW5zLmhhcyh0YXNrLmlkKSkge1xuICAgICAgdmlzaXQodGFzayk7XG4gICAgfVxuICB9XG5cbiAgYXBwLnBsdWdpbnMgPSBsZWdhY3lTb3J0ZWQ7XG59XG4iXX0=