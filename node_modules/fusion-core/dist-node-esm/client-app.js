/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

/* eslint-env browser */
import { compose } from './compose.js';
import timing, { TimingToken } from './plugins/timing';
import BaseApp from './base-app';
import createClientHydrate, { getSerializedRoutePrefix } from './plugins/client-hydrate';
import createClientRenderer from './plugins/client-renderer';
import { RenderToken, ElementToken } from './tokens';
export default function () {
  return class ClientApp extends BaseApp {
    constructor(el, render) {
      super(el, render);
      this.register(TimingToken, timing);
      this.middleware({
        element: ElementToken
      }, createClientHydrate);
    }

    resolve() {
      this.middleware({
        render: RenderToken
      }, createClientRenderer(this));
      return super.resolve();
    }

    callback() {
      this.resolve();
      const middleware = compose(this.plugins);
      return () => {
        // TODO(#62): Create noop context object to match server api
        const routePrefix = getSerializedRoutePrefix();
        const replaceRouteRegex = new RegExp(`^${routePrefix}`);
        const ctx = {
          url: (window.location.pathname + window.location.search).replace(replaceRouteRegex, ''),
          element: null,
          body: null
        };
        return middleware(ctx, () => Promise.resolve()).then(() => ctx);
      };
    }

  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9jbGllbnQtYXBwLmpzIl0sIm5hbWVzIjpbImNvbXBvc2UiLCJ0aW1pbmciLCJUaW1pbmdUb2tlbiIsIkJhc2VBcHAiLCJjcmVhdGVDbGllbnRIeWRyYXRlIiwiZ2V0U2VyaWFsaXplZFJvdXRlUHJlZml4IiwiY3JlYXRlQ2xpZW50UmVuZGVyZXIiLCJSZW5kZXJUb2tlbiIsIkVsZW1lbnRUb2tlbiIsIkNsaWVudEFwcCIsImNvbnN0cnVjdG9yIiwiZWwiLCJyZW5kZXIiLCJyZWdpc3RlciIsIm1pZGRsZXdhcmUiLCJlbGVtZW50IiwicmVzb2x2ZSIsImNhbGxiYWNrIiwicGx1Z2lucyIsInJvdXRlUHJlZml4IiwicmVwbGFjZVJvdXRlUmVnZXgiLCJSZWdFeHAiLCJjdHgiLCJ1cmwiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsInBhdGhuYW1lIiwic2VhcmNoIiwicmVwbGFjZSIsImJvZHkiLCJQcm9taXNlIiwidGhlbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQSxTQUFRQSxPQUFSLFFBQXNCLGNBQXRCO0FBQ0EsT0FBT0MsTUFBUCxJQUFnQkMsV0FBaEIsUUFBa0Msa0JBQWxDO0FBQ0EsT0FBT0MsT0FBUCxNQUFvQixZQUFwQjtBQUNBLE9BQU9DLG1CQUFQLElBQ0VDLHdCQURGLFFBRU8sMEJBRlA7QUFHQSxPQUFPQyxvQkFBUCxNQUFpQywyQkFBakM7QUFDQSxTQUFRQyxXQUFSLEVBQXFCQyxZQUFyQixRQUF3QyxVQUF4QztBQUVBLGVBQWUsWUFBWTtBQUN6QixTQUFPLE1BQU1DLFNBQU4sU0FBd0JOLE9BQXhCLENBQWdDO0FBQ3JDTyxJQUFBQSxXQUFXLENBQUNDLEVBQUQsRUFBS0MsTUFBTCxFQUFhO0FBQ3RCLFlBQU1ELEVBQU4sRUFBVUMsTUFBVjtBQUNBLFdBQUtDLFFBQUwsQ0FBY1gsV0FBZCxFQUEyQkQsTUFBM0I7QUFDQSxXQUFLYSxVQUFMLENBQWdCO0FBQUNDLFFBQUFBLE9BQU8sRUFBRVA7QUFBVixPQUFoQixFQUF5Q0osbUJBQXpDO0FBQ0Q7O0FBQ0RZLElBQUFBLE9BQU8sR0FBRztBQUNSLFdBQUtGLFVBQUwsQ0FBZ0I7QUFBQ0YsUUFBQUEsTUFBTSxFQUFFTDtBQUFULE9BQWhCLEVBQXVDRCxvQkFBb0IsQ0FBQyxJQUFELENBQTNEO0FBQ0EsYUFBTyxNQUFNVSxPQUFOLEVBQVA7QUFDRDs7QUFDREMsSUFBQUEsUUFBUSxHQUFHO0FBQ1QsV0FBS0QsT0FBTDtBQUNBLFlBQU1GLFVBQVUsR0FBR2QsT0FBTyxDQUFDLEtBQUtrQixPQUFOLENBQTFCO0FBQ0EsYUFBTyxNQUFNO0FBQ1g7QUFDQSxjQUFNQyxXQUFXLEdBQUdkLHdCQUF3QixFQUE1QztBQUNBLGNBQU1lLGlCQUFpQixHQUFHLElBQUlDLE1BQUosQ0FBWSxJQUFHRixXQUFZLEVBQTNCLENBQTFCO0FBQ0EsY0FBTUcsR0FBRyxHQUFHO0FBQ1ZDLFVBQUFBLEdBQUcsRUFBRSxDQUFDQyxNQUFNLENBQUNDLFFBQVAsQ0FBZ0JDLFFBQWhCLEdBQTJCRixNQUFNLENBQUNDLFFBQVAsQ0FBZ0JFLE1BQTVDLEVBQW9EQyxPQUFwRCxDQUNIUixpQkFERyxFQUVILEVBRkcsQ0FESztBQUtWTCxVQUFBQSxPQUFPLEVBQUUsSUFMQztBQU1WYyxVQUFBQSxJQUFJLEVBQUU7QUFOSSxTQUFaO0FBUUEsZUFBT2YsVUFBVSxDQUFDUSxHQUFELEVBQU0sTUFBTVEsT0FBTyxDQUFDZCxPQUFSLEVBQVosQ0FBVixDQUF5Q2UsSUFBekMsQ0FBOEMsTUFBTVQsR0FBcEQsQ0FBUDtBQUNELE9BYkQ7QUFjRDs7QUEzQm9DLEdBQXZDO0FBNkJEIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIENvcHlyaWdodCAoYykgMjAxOCBVYmVyIFRlY2hub2xvZ2llcywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBub2Zsb3dcbiAqL1xuLyogZXNsaW50LWVudiBicm93c2VyICovXG5pbXBvcnQge2NvbXBvc2V9IGZyb20gJy4vY29tcG9zZS5qcyc7XG5pbXBvcnQgdGltaW5nLCB7VGltaW5nVG9rZW59IGZyb20gJy4vcGx1Z2lucy90aW1pbmcnO1xuaW1wb3J0IEJhc2VBcHAgZnJvbSAnLi9iYXNlLWFwcCc7XG5pbXBvcnQgY3JlYXRlQ2xpZW50SHlkcmF0ZSwge1xuICBnZXRTZXJpYWxpemVkUm91dGVQcmVmaXgsXG59IGZyb20gJy4vcGx1Z2lucy9jbGllbnQtaHlkcmF0ZSc7XG5pbXBvcnQgY3JlYXRlQ2xpZW50UmVuZGVyZXIgZnJvbSAnLi9wbHVnaW5zL2NsaWVudC1yZW5kZXJlcic7XG5pbXBvcnQge1JlbmRlclRva2VuLCBFbGVtZW50VG9rZW59IGZyb20gJy4vdG9rZW5zJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gY2xhc3MgQ2xpZW50QXBwIGV4dGVuZHMgQmFzZUFwcCB7XG4gICAgY29uc3RydWN0b3IoZWwsIHJlbmRlcikge1xuICAgICAgc3VwZXIoZWwsIHJlbmRlcik7XG4gICAgICB0aGlzLnJlZ2lzdGVyKFRpbWluZ1Rva2VuLCB0aW1pbmcpO1xuICAgICAgdGhpcy5taWRkbGV3YXJlKHtlbGVtZW50OiBFbGVtZW50VG9rZW59LCBjcmVhdGVDbGllbnRIeWRyYXRlKTtcbiAgICB9XG4gICAgcmVzb2x2ZSgpIHtcbiAgICAgIHRoaXMubWlkZGxld2FyZSh7cmVuZGVyOiBSZW5kZXJUb2tlbn0sIGNyZWF0ZUNsaWVudFJlbmRlcmVyKHRoaXMpKTtcbiAgICAgIHJldHVybiBzdXBlci5yZXNvbHZlKCk7XG4gICAgfVxuICAgIGNhbGxiYWNrKCkge1xuICAgICAgdGhpcy5yZXNvbHZlKCk7XG4gICAgICBjb25zdCBtaWRkbGV3YXJlID0gY29tcG9zZSh0aGlzLnBsdWdpbnMpO1xuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgLy8gVE9ETygjNjIpOiBDcmVhdGUgbm9vcCBjb250ZXh0IG9iamVjdCB0byBtYXRjaCBzZXJ2ZXIgYXBpXG4gICAgICAgIGNvbnN0IHJvdXRlUHJlZml4ID0gZ2V0U2VyaWFsaXplZFJvdXRlUHJlZml4KCk7XG4gICAgICAgIGNvbnN0IHJlcGxhY2VSb3V0ZVJlZ2V4ID0gbmV3IFJlZ0V4cChgXiR7cm91dGVQcmVmaXh9YCk7XG4gICAgICAgIGNvbnN0IGN0eCA9IHtcbiAgICAgICAgICB1cmw6ICh3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUgKyB3aW5kb3cubG9jYXRpb24uc2VhcmNoKS5yZXBsYWNlKFxuICAgICAgICAgICAgcmVwbGFjZVJvdXRlUmVnZXgsXG4gICAgICAgICAgICAnJ1xuICAgICAgICAgICksXG4gICAgICAgICAgZWxlbWVudDogbnVsbCxcbiAgICAgICAgICBib2R5OiBudWxsLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gbWlkZGxld2FyZShjdHgsICgpID0+IFByb21pc2UucmVzb2x2ZSgpKS50aGVuKCgpID0+IGN0eCk7XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn1cbiJdfQ==