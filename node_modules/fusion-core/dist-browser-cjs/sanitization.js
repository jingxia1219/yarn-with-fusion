"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unescape = exports.escape = exports.consumeSanitizedHTML = exports.dangerouslySetHTML = exports.html = void 0;

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

/*
We never want developers to be able to write `ctx.template.body.push(`<div>${stuff}</div>`)`
because that allows XSS attacks by default (e.g. if stuff === '<script>alert(1)</script>')
Instead, they should use html`<div>{stuff}</div>` so interpolated data gets automatically escaped
We trust the markup outside of interpolation because it's code written by a developer with commit permissions,
which can be audited via code reviews
*/
// eslint-disable-next-line import/no-mutable-exports
let html, dangerouslySetHTML, consumeSanitizedHTML, escape;
exports.escape = escape;
exports.consumeSanitizedHTML = consumeSanitizedHTML;
exports.dangerouslySetHTML = dangerouslySetHTML;
exports.html = html;

if (false) {
  const forbiddenChars = {
    '<': '\\u003C',
    '>': '\\u003E',
    '"': '\\u0022',
    '&': '\\u0026',
    '\u2028': '\\u2028',
    '\u2029': '\\u2029'
  };

  const replaceForbidden = c => forbiddenChars[c];

  const key = Symbol('sanitized html');
  const inspect = Symbol.for('nodejs.util.inspect.custom');

  exports.html = html = ([head, ...rest], ...values) => {
    const obj = {};
    Object.defineProperty(obj, inspect, {
      value: function inspectHtml() {
        return consumeSanitizedHTML(this);
      }
    });
    Object.defineProperty(obj, key, {
      enumerable: false,
      configurable: false,
      value: head + values.map((s, i) => escape(s) + rest[i]).join('')
    });
    return obj;
  };

  exports.dangerouslySetHTML = dangerouslySetHTML = str => html([str]);

  exports.escape = escape = str => {
    if (str && str[key] !== undefined) return consumeSanitizedHTML(str);
    return String(str).replace(/[<>&"\u2028\u2029]/g, replaceForbidden);
  };

  exports.consumeSanitizedHTML = consumeSanitizedHTML = h => {
    if (typeof h === 'string') {
      throw new Error(`Unsanitized html. Use html\`${h}\``);
    }

    return h[key];
  };
}

const replaceEscaped = c => String.fromCodePoint(parseInt(c.slice(2), 16));

const unescape = str => {
  return str.replace(/\\u003C|\\u003E|\\u0022|\\u002F|\\u2028|\\u2029|\\u0026/g, replaceEscaped);
};

exports.unescape = unescape;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9zYW5pdGl6YXRpb24uanMiXSwibmFtZXMiOlsiaHRtbCIsImRhbmdlcm91c2x5U2V0SFRNTCIsImNvbnN1bWVTYW5pdGl6ZWRIVE1MIiwiZXNjYXBlIiwiZm9yYmlkZGVuQ2hhcnMiLCJyZXBsYWNlRm9yYmlkZGVuIiwiYyIsImtleSIsIlN5bWJvbCIsImluc3BlY3QiLCJmb3IiLCJoZWFkIiwicmVzdCIsInZhbHVlcyIsIm9iaiIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJpbnNwZWN0SHRtbCIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJtYXAiLCJzIiwiaSIsImpvaW4iLCJzdHIiLCJ1bmRlZmluZWQiLCJTdHJpbmciLCJyZXBsYWNlIiwiaCIsIkVycm9yIiwicmVwbGFjZUVzY2FwZWQiLCJmcm9tQ29kZVBvaW50IiwicGFyc2VJbnQiLCJzbGljZSIsInVuZXNjYXBlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBLElBQUlBLElBQUosRUFBVUMsa0JBQVYsRUFBOEJDLG9CQUE5QixFQUFvREMsTUFBcEQ7Ozs7OztBQUNBLFdBQWM7QUFDWixRQUFNQyxjQUFjLEdBQUc7QUFDckIsU0FBSyxTQURnQjtBQUVyQixTQUFLLFNBRmdCO0FBR3JCLFNBQUssU0FIZ0I7QUFJckIsU0FBSyxTQUpnQjtBQUtyQixjQUFVLFNBTFc7QUFNckIsY0FBVTtBQU5XLEdBQXZCOztBQVFBLFFBQU1DLGdCQUFnQixHQUFJQyxDQUFELElBQU9GLGNBQWMsQ0FBQ0UsQ0FBRCxDQUE5Qzs7QUFFQSxRQUFNQyxHQUFHLEdBQUdDLE1BQU0sQ0FBQyxnQkFBRCxDQUFsQjtBQUNBLFFBQU1DLE9BQU8sR0FBR0QsTUFBTSxDQUFDRSxHQUFQLENBQVcsNEJBQVgsQ0FBaEI7O0FBQ0EsaUJBQUFWLElBQUksR0FBRyxDQUFDLENBQUNXLElBQUQsRUFBTyxHQUFHQyxJQUFWLENBQUQsRUFBa0IsR0FBR0MsTUFBckIsS0FBZ0M7QUFDckMsVUFBTUMsR0FBRyxHQUFHLEVBQVo7QUFDQUMsSUFBQUEsTUFBTSxDQUFDQyxjQUFQLENBQXNCRixHQUF0QixFQUEyQkwsT0FBM0IsRUFBb0M7QUFDbENRLE1BQUFBLEtBQUssRUFBRSxTQUFTQyxXQUFULEdBQXVCO0FBQzVCLGVBQU9oQixvQkFBb0IsQ0FBQyxJQUFELENBQTNCO0FBQ0Q7QUFIaUMsS0FBcEM7QUFLQWEsSUFBQUEsTUFBTSxDQUFDQyxjQUFQLENBQXNCRixHQUF0QixFQUEyQlAsR0FBM0IsRUFBZ0M7QUFDOUJZLE1BQUFBLFVBQVUsRUFBRSxLQURrQjtBQUU5QkMsTUFBQUEsWUFBWSxFQUFFLEtBRmdCO0FBRzlCSCxNQUFBQSxLQUFLLEVBQUVOLElBQUksR0FBR0UsTUFBTSxDQUFDUSxHQUFQLENBQVcsQ0FBQ0MsQ0FBRCxFQUFJQyxDQUFKLEtBQVVwQixNQUFNLENBQUNtQixDQUFELENBQU4sR0FBWVYsSUFBSSxDQUFDVyxDQUFELENBQXJDLEVBQTBDQyxJQUExQyxDQUErQyxFQUEvQztBQUhnQixLQUFoQztBQUtBLFdBQU9WLEdBQVA7QUFDRCxHQWJEOztBQWNBLCtCQUFBYixrQkFBa0IsR0FBSXdCLEdBQUQsSUFBU3pCLElBQUksQ0FBQyxDQUFDeUIsR0FBRCxDQUFELENBQWxDOztBQUNBLG1CQUFBdEIsTUFBTSxHQUFJc0IsR0FBRCxJQUFTO0FBQ2hCLFFBQUlBLEdBQUcsSUFBSUEsR0FBRyxDQUFDbEIsR0FBRCxDQUFILEtBQWFtQixTQUF4QixFQUFtQyxPQUFPeEIsb0JBQW9CLENBQUN1QixHQUFELENBQTNCO0FBQ25DLFdBQU9FLE1BQU0sQ0FBQ0YsR0FBRCxDQUFOLENBQVlHLE9BQVosQ0FBb0IscUJBQXBCLEVBQTJDdkIsZ0JBQTNDLENBQVA7QUFDRCxHQUhEOztBQUlBLGlDQUFBSCxvQkFBb0IsR0FBSTJCLENBQUQsSUFBTztBQUM1QixRQUFJLE9BQU9BLENBQVAsS0FBYSxRQUFqQixFQUEyQjtBQUN6QixZQUFNLElBQUlDLEtBQUosQ0FBVywrQkFBOEJELENBQUUsSUFBM0MsQ0FBTjtBQUNEOztBQUNELFdBQU9BLENBQUMsQ0FBQ3RCLEdBQUQsQ0FBUjtBQUNELEdBTEQ7QUFNRDs7QUFDRCxNQUFNd0IsY0FBYyxHQUFJekIsQ0FBRCxJQUFPcUIsTUFBTSxDQUFDSyxhQUFQLENBQXFCQyxRQUFRLENBQUMzQixDQUFDLENBQUM0QixLQUFGLENBQVEsQ0FBUixDQUFELEVBQWEsRUFBYixDQUE3QixDQUE5Qjs7QUFDQSxNQUFNQyxRQUFRLEdBQUlWLEdBQUQsSUFBUztBQUN4QixTQUFPQSxHQUFHLENBQUNHLE9BQUosQ0FDTCwwREFESyxFQUVMRyxjQUZLLENBQVA7QUFJRCxDQUxEIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIENvcHlyaWdodCAoYykgMjAxOCBVYmVyIFRlY2hub2xvZ2llcywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBub2Zsb3dcbiAqL1xuLypcbldlIG5ldmVyIHdhbnQgZGV2ZWxvcGVycyB0byBiZSBhYmxlIHRvIHdyaXRlIGBjdHgudGVtcGxhdGUuYm9keS5wdXNoKGA8ZGl2PiR7c3R1ZmZ9PC9kaXY+YClgXG5iZWNhdXNlIHRoYXQgYWxsb3dzIFhTUyBhdHRhY2tzIGJ5IGRlZmF1bHQgKGUuZy4gaWYgc3R1ZmYgPT09ICc8c2NyaXB0PmFsZXJ0KDEpPC9zY3JpcHQ+Jylcbkluc3RlYWQsIHRoZXkgc2hvdWxkIHVzZSBodG1sYDxkaXY+e3N0dWZmfTwvZGl2PmAgc28gaW50ZXJwb2xhdGVkIGRhdGEgZ2V0cyBhdXRvbWF0aWNhbGx5IGVzY2FwZWRcbldlIHRydXN0IHRoZSBtYXJrdXAgb3V0c2lkZSBvZiBpbnRlcnBvbGF0aW9uIGJlY2F1c2UgaXQncyBjb2RlIHdyaXR0ZW4gYnkgYSBkZXZlbG9wZXIgd2l0aCBjb21taXQgcGVybWlzc2lvbnMsXG53aGljaCBjYW4gYmUgYXVkaXRlZCB2aWEgY29kZSByZXZpZXdzXG4qL1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLW11dGFibGUtZXhwb3J0c1xubGV0IGh0bWwsIGRhbmdlcm91c2x5U2V0SFRNTCwgY29uc3VtZVNhbml0aXplZEhUTUwsIGVzY2FwZTtcbmlmIChfX05PREVfXykge1xuICBjb25zdCBmb3JiaWRkZW5DaGFycyA9IHtcbiAgICAnPCc6ICdcXFxcdTAwM0MnLFxuICAgICc+JzogJ1xcXFx1MDAzRScsXG4gICAgJ1wiJzogJ1xcXFx1MDAyMicsXG4gICAgJyYnOiAnXFxcXHUwMDI2JyxcbiAgICAnXFx1MjAyOCc6ICdcXFxcdTIwMjgnLFxuICAgICdcXHUyMDI5JzogJ1xcXFx1MjAyOScsXG4gIH07XG4gIGNvbnN0IHJlcGxhY2VGb3JiaWRkZW4gPSAoYykgPT4gZm9yYmlkZGVuQ2hhcnNbY107XG5cbiAgY29uc3Qga2V5ID0gU3ltYm9sKCdzYW5pdGl6ZWQgaHRtbCcpO1xuICBjb25zdCBpbnNwZWN0ID0gU3ltYm9sLmZvcignbm9kZWpzLnV0aWwuaW5zcGVjdC5jdXN0b20nKTtcbiAgaHRtbCA9IChbaGVhZCwgLi4ucmVzdF0sIC4uLnZhbHVlcykgPT4ge1xuICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGluc3BlY3QsIHtcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBpbnNwZWN0SHRtbCgpIHtcbiAgICAgICAgcmV0dXJuIGNvbnN1bWVTYW5pdGl6ZWRIVE1MKHRoaXMpO1xuICAgICAgfSxcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICAgIHZhbHVlOiBoZWFkICsgdmFsdWVzLm1hcCgocywgaSkgPT4gZXNjYXBlKHMpICsgcmVzdFtpXSkuam9pbignJyksXG4gICAgfSk7XG4gICAgcmV0dXJuIG9iajtcbiAgfTtcbiAgZGFuZ2Vyb3VzbHlTZXRIVE1MID0gKHN0cikgPT4gaHRtbChbc3RyXSk7XG4gIGVzY2FwZSA9IChzdHIpID0+IHtcbiAgICBpZiAoc3RyICYmIHN0cltrZXldICE9PSB1bmRlZmluZWQpIHJldHVybiBjb25zdW1lU2FuaXRpemVkSFRNTChzdHIpO1xuICAgIHJldHVybiBTdHJpbmcoc3RyKS5yZXBsYWNlKC9bPD4mXCJcXHUyMDI4XFx1MjAyOV0vZywgcmVwbGFjZUZvcmJpZGRlbik7XG4gIH07XG4gIGNvbnN1bWVTYW5pdGl6ZWRIVE1MID0gKGgpID0+IHtcbiAgICBpZiAodHlwZW9mIGggPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuc2FuaXRpemVkIGh0bWwuIFVzZSBodG1sXFxgJHtofVxcYGApO1xuICAgIH1cbiAgICByZXR1cm4gaFtrZXldO1xuICB9O1xufVxuY29uc3QgcmVwbGFjZUVzY2FwZWQgPSAoYykgPT4gU3RyaW5nLmZyb21Db2RlUG9pbnQocGFyc2VJbnQoYy5zbGljZSgyKSwgMTYpKTtcbmNvbnN0IHVuZXNjYXBlID0gKHN0cikgPT4ge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoXG4gICAgL1xcXFx1MDAzQ3xcXFxcdTAwM0V8XFxcXHUwMDIyfFxcXFx1MDAyRnxcXFxcdTIwMjh8XFxcXHUyMDI5fFxcXFx1MDAyNi9nLFxuICAgIHJlcGxhY2VFc2NhcGVkXG4gICk7XG59O1xuXG5leHBvcnQge2h0bWwsIGRhbmdlcm91c2x5U2V0SFRNTCwgY29uc3VtZVNhbml0aXplZEhUTUwsIGVzY2FwZSwgdW5lc2NhcGV9O1xuIl19