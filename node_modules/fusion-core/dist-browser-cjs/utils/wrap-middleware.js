"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = wrapMiddleware;

var _now = require("./now.js");

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
const getSources = stacks => {
  // stack is of format: 'at file_xyz.js (/some/file/system/path.js:30:1)\n'
  return stacks.map(({
    type,
    stack = ''
  }) => {
    return {
      type,
      source: stack.split('\n').map(line => line.match(/\((.*?)\)/)).filter(match => match && match[1]).map(match => match[1]).map(to => false ? path.relative(process.cwd(), to) : to).shift()
    };
  });
}; // Wraps middleware for measuring middleware timing


function wrapMiddleware(existingMiddleware, token) {
  return async (ctx, next) => {
    const downstreamStart = (0, _now.now)();
    let upstreamStart = 0;
    const timing = {
      token: token.name,
      source: JSON.stringify(getSources(token.stacks)),
      downstream: -1,
      upstream: -1
    };

    if (ctx.timing) {
      ctx.timing.middleware.push(timing);
    }

    const wrapNext = async () => {
      timing.downstream = (0, _now.now)() - downstreamStart;
      await next();
      upstreamStart = (0, _now.now)();
    };

    await existingMiddleware(ctx, wrapNext);
    timing.upstream = (0, _now.now)() - upstreamStart;
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy91dGlscy93cmFwLW1pZGRsZXdhcmUuanMiXSwibmFtZXMiOlsiZ2V0U291cmNlcyIsInN0YWNrcyIsIm1hcCIsInR5cGUiLCJzdGFjayIsInNvdXJjZSIsInNwbGl0IiwibGluZSIsIm1hdGNoIiwiZmlsdGVyIiwidG8iLCJwYXRoIiwicmVsYXRpdmUiLCJwcm9jZXNzIiwiY3dkIiwic2hpZnQiLCJ3cmFwTWlkZGxld2FyZSIsImV4aXN0aW5nTWlkZGxld2FyZSIsInRva2VuIiwiY3R4IiwibmV4dCIsImRvd25zdHJlYW1TdGFydCIsInVwc3RyZWFtU3RhcnQiLCJ0aW1pbmciLCJuYW1lIiwiSlNPTiIsInN0cmluZ2lmeSIsImRvd25zdHJlYW0iLCJ1cHN0cmVhbSIsIm1pZGRsZXdhcmUiLCJwdXNoIiwid3JhcE5leHQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFRQTs7QUFSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlBLE1BQU1BLFVBQVUsR0FBSUMsTUFBRCxJQUFZO0FBQzdCO0FBQ0EsU0FBT0EsTUFBTSxDQUFDQyxHQUFQLENBQVcsQ0FBQztBQUFDQyxJQUFBQSxJQUFEO0FBQU9DLElBQUFBLEtBQUssR0FBRztBQUFmLEdBQUQsS0FBd0I7QUFDeEMsV0FBTztBQUNMRCxNQUFBQSxJQURLO0FBRUxFLE1BQUFBLE1BQU0sRUFBRUQsS0FBSyxDQUNWRSxLQURLLENBQ0MsSUFERCxFQUVMSixHQUZLLENBRUFLLElBQUQsSUFBVUEsSUFBSSxDQUFDQyxLQUFMLENBQVcsV0FBWCxDQUZULEVBR0xDLE1BSEssQ0FHR0QsS0FBRCxJQUFXQSxLQUFLLElBQUlBLEtBQUssQ0FBQyxDQUFELENBSDNCLEVBSUxOLEdBSkssQ0FJQU0sS0FBRCxJQUFXQSxLQUFLLENBQUMsQ0FBRCxDQUpmLEVBS0xOLEdBTEssQ0FLQVEsRUFBRCxJQUFTLFFBQVdDLElBQUksQ0FBQ0MsUUFBTCxDQUFjQyxPQUFPLENBQUNDLEdBQVIsRUFBZCxFQUE2QkosRUFBN0IsQ0FBWCxHQUE4Q0EsRUFMdEQsRUFNTEssS0FOSztBQUZILEtBQVA7QUFVRCxHQVhNLENBQVA7QUFZRCxDQWRELEMsQ0FnQkE7OztBQUNlLFNBQVNDLGNBQVQsQ0FBd0JDLGtCQUF4QixFQUE0Q0MsS0FBNUMsRUFBbUQ7QUFDaEUsU0FBTyxPQUFPQyxHQUFQLEVBQVlDLElBQVosS0FBcUI7QUFDMUIsVUFBTUMsZUFBZSxHQUFHLGVBQXhCO0FBQ0EsUUFBSUMsYUFBYSxHQUFHLENBQXBCO0FBRUEsVUFBTUMsTUFBTSxHQUFHO0FBQ2JMLE1BQUFBLEtBQUssRUFBRUEsS0FBSyxDQUFDTSxJQURBO0FBRWJuQixNQUFBQSxNQUFNLEVBQUVvQixJQUFJLENBQUNDLFNBQUwsQ0FBZTFCLFVBQVUsQ0FBQ2tCLEtBQUssQ0FBQ2pCLE1BQVAsQ0FBekIsQ0FGSztBQUdiMEIsTUFBQUEsVUFBVSxFQUFFLENBQUMsQ0FIQTtBQUliQyxNQUFBQSxRQUFRLEVBQUUsQ0FBQztBQUpFLEtBQWY7O0FBTUEsUUFBSVQsR0FBRyxDQUFDSSxNQUFSLEVBQWdCO0FBQ2RKLE1BQUFBLEdBQUcsQ0FBQ0ksTUFBSixDQUFXTSxVQUFYLENBQXNCQyxJQUF0QixDQUEyQlAsTUFBM0I7QUFDRDs7QUFFRCxVQUFNUSxRQUFRLEdBQUcsWUFBWTtBQUMzQlIsTUFBQUEsTUFBTSxDQUFDSSxVQUFQLEdBQW9CLGtCQUFRTixlQUE1QjtBQUNBLFlBQU1ELElBQUksRUFBVjtBQUNBRSxNQUFBQSxhQUFhLEdBQUcsZUFBaEI7QUFDRCxLQUpEOztBQUtBLFVBQU1MLGtCQUFrQixDQUFDRSxHQUFELEVBQU1ZLFFBQU4sQ0FBeEI7QUFDQVIsSUFBQUEsTUFBTSxDQUFDSyxRQUFQLEdBQWtCLGtCQUFRTixhQUExQjtBQUNELEdBckJEO0FBc0JEIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIENvcHlyaWdodCAoYykgMjAxOCBVYmVyIFRlY2hub2xvZ2llcywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBub2Zsb3dcbiAqL1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQge25vd30gZnJvbSAnLi9ub3cuanMnO1xuXG5jb25zdCBnZXRTb3VyY2VzID0gKHN0YWNrcykgPT4ge1xuICAvLyBzdGFjayBpcyBvZiBmb3JtYXQ6ICdhdCBmaWxlX3h5ei5qcyAoL3NvbWUvZmlsZS9zeXN0ZW0vcGF0aC5qczozMDoxKVxcbidcbiAgcmV0dXJuIHN0YWNrcy5tYXAoKHt0eXBlLCBzdGFjayA9ICcnfSkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlLFxuICAgICAgc291cmNlOiBzdGFja1xuICAgICAgICAuc3BsaXQoJ1xcbicpXG4gICAgICAgIC5tYXAoKGxpbmUpID0+IGxpbmUubWF0Y2goL1xcKCguKj8pXFwpLykpXG4gICAgICAgIC5maWx0ZXIoKG1hdGNoKSA9PiBtYXRjaCAmJiBtYXRjaFsxXSlcbiAgICAgICAgLm1hcCgobWF0Y2gpID0+IG1hdGNoWzFdKVxuICAgICAgICAubWFwKCh0bykgPT4gKF9fTk9ERV9fID8gcGF0aC5yZWxhdGl2ZShwcm9jZXNzLmN3ZCgpLCB0bykgOiB0bykpXG4gICAgICAgIC5zaGlmdCgpLFxuICAgIH07XG4gIH0pO1xufTtcblxuLy8gV3JhcHMgbWlkZGxld2FyZSBmb3IgbWVhc3VyaW5nIG1pZGRsZXdhcmUgdGltaW5nXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB3cmFwTWlkZGxld2FyZShleGlzdGluZ01pZGRsZXdhcmUsIHRva2VuKSB7XG4gIHJldHVybiBhc3luYyAoY3R4LCBuZXh0KSA9PiB7XG4gICAgY29uc3QgZG93bnN0cmVhbVN0YXJ0ID0gbm93KCk7XG4gICAgbGV0IHVwc3RyZWFtU3RhcnQgPSAwO1xuXG4gICAgY29uc3QgdGltaW5nID0ge1xuICAgICAgdG9rZW46IHRva2VuLm5hbWUsXG4gICAgICBzb3VyY2U6IEpTT04uc3RyaW5naWZ5KGdldFNvdXJjZXModG9rZW4uc3RhY2tzKSksXG4gICAgICBkb3duc3RyZWFtOiAtMSxcbiAgICAgIHVwc3RyZWFtOiAtMSxcbiAgICB9O1xuICAgIGlmIChjdHgudGltaW5nKSB7XG4gICAgICBjdHgudGltaW5nLm1pZGRsZXdhcmUucHVzaCh0aW1pbmcpO1xuICAgIH1cblxuICAgIGNvbnN0IHdyYXBOZXh0ID0gYXN5bmMgKCkgPT4ge1xuICAgICAgdGltaW5nLmRvd25zdHJlYW0gPSBub3coKSAtIGRvd25zdHJlYW1TdGFydDtcbiAgICAgIGF3YWl0IG5leHQoKTtcbiAgICAgIHVwc3RyZWFtU3RhcnQgPSBub3coKTtcbiAgICB9O1xuICAgIGF3YWl0IGV4aXN0aW5nTWlkZGxld2FyZShjdHgsIHdyYXBOZXh0KTtcbiAgICB0aW1pbmcudXBzdHJlYW0gPSBub3coKSAtIHVwc3RyZWFtU3RhcnQ7XG4gIH07XG59XG4iXX0=