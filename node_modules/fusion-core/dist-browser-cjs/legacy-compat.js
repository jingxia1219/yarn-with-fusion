"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createPlugin = createPlugin;
exports.sortLegacy = sortLegacy;

var _core = require("./core.js");

var _createPlugin = require("./create-plugin.js");

var _createToken = require("./create-token.js");

function createPlugin(opts) {
  function* LegacyPlugin() {
    let resolvedDeps = {};
    const depKeys = opts.deps ? Object.keys(opts.deps) : [];

    if (depKeys.length) {
      const deps = yield (0, _core.withDeps)(depKeys.map(key => opts.deps[key]));
      deps.forEach((dep, i) => {
        resolvedDeps[depKeys[i]] = dep;
      });
    }

    let providedValue;

    if (opts.provides) {
      providedValue = opts.provides(resolvedDeps);
    }

    if (opts.middleware) {
      let legacyMiddleware = opts.middleware(resolvedDeps, providedValue);
      (0, _core.withUniversalMiddleware)(legacyMiddleware);
    }

    if (opts.cleanup && typeof opts.cleanup === 'function') {
      (0, _core.withCleanup)(() => {
        opts.cleanup(providedValue);
      });
    }

    return providedValue;
  }

  return (0, _createPlugin.declarePlugin)(LegacyPlugin);
} // The core implementation yields a topological order of middleware, however
// it differs from the old implementation. In order to maintain compatibility
// with existing apps, we should sort this in the same way


function sortLegacy(app) {
  let legacySorted = [];
  const seen = new Set();

  function visit(task) {
    if (seen.has(task)) {
      return;
    }

    seen.add(task);
    let requested = new Set(task.requested);

    for (let t of app.taskMap.values()) {
      if (requested.has((0, _createToken.getTokenRef)(t.id))) {
        visit(t);
      }
    }

    if (task.child) {
      visit(task.child);
    }

    if (task.middleware) {
      legacySorted.push(task.middleware);
    }

    if (app.enhancerChainTails.has((0, _createToken.getTokenRef)(task.id))) {
      visit(app.taskMap.get(app.enhancerChainTails.get((0, _createToken.getTokenRef)(task.id))));
    }
  }

  for (let task of app.taskMap.values()) {
    if (!app.enhancerTokens.has(task.id)) {
      visit(task);
    }
  }

  app.plugins = legacySorted;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9sZWdhY3ktY29tcGF0LmpzIl0sIm5hbWVzIjpbImNyZWF0ZVBsdWdpbiIsIm9wdHMiLCJMZWdhY3lQbHVnaW4iLCJyZXNvbHZlZERlcHMiLCJkZXBLZXlzIiwiZGVwcyIsIk9iamVjdCIsImtleXMiLCJsZW5ndGgiLCJtYXAiLCJrZXkiLCJmb3JFYWNoIiwiZGVwIiwiaSIsInByb3ZpZGVkVmFsdWUiLCJwcm92aWRlcyIsIm1pZGRsZXdhcmUiLCJsZWdhY3lNaWRkbGV3YXJlIiwiY2xlYW51cCIsInNvcnRMZWdhY3kiLCJhcHAiLCJsZWdhY3lTb3J0ZWQiLCJzZWVuIiwiU2V0IiwidmlzaXQiLCJ0YXNrIiwiaGFzIiwiYWRkIiwicmVxdWVzdGVkIiwidCIsInRhc2tNYXAiLCJ2YWx1ZXMiLCJpZCIsImNoaWxkIiwicHVzaCIsImVuaGFuY2VyQ2hhaW5UYWlscyIsImdldCIsImVuaGFuY2VyVG9rZW5zIiwicGx1Z2lucyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFDQTs7QUFDQTs7QUFFQTs7QUFFTyxTQUFTQSxZQUFULENBQXNCQyxJQUF0QixFQUE0QjtBQUNqQyxZQUFVQyxZQUFWLEdBQXlCO0FBQ3ZCLFFBQUlDLFlBQVksR0FBRyxFQUFuQjtBQUNBLFVBQU1DLE9BQU8sR0FBR0gsSUFBSSxDQUFDSSxJQUFMLEdBQVlDLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZTixJQUFJLENBQUNJLElBQWpCLENBQVosR0FBcUMsRUFBckQ7O0FBQ0EsUUFBSUQsT0FBTyxDQUFDSSxNQUFaLEVBQW9CO0FBQ2xCLFlBQU1ILElBQUksR0FBRyxNQUFNLG9CQUFTRCxPQUFPLENBQUNLLEdBQVIsQ0FBYUMsR0FBRCxJQUFTVCxJQUFJLENBQUNJLElBQUwsQ0FBVUssR0FBVixDQUFyQixDQUFULENBQW5CO0FBQ0FMLE1BQUFBLElBQUksQ0FBQ00sT0FBTCxDQUFhLENBQUNDLEdBQUQsRUFBTUMsQ0FBTixLQUFZO0FBQ3ZCVixRQUFBQSxZQUFZLENBQUNDLE9BQU8sQ0FBQ1MsQ0FBRCxDQUFSLENBQVosR0FBMkJELEdBQTNCO0FBQ0QsT0FGRDtBQUdEOztBQUNELFFBQUlFLGFBQUo7O0FBQ0EsUUFBSWIsSUFBSSxDQUFDYyxRQUFULEVBQW1CO0FBQ2pCRCxNQUFBQSxhQUFhLEdBQUdiLElBQUksQ0FBQ2MsUUFBTCxDQUFjWixZQUFkLENBQWhCO0FBQ0Q7O0FBQ0QsUUFBSUYsSUFBSSxDQUFDZSxVQUFULEVBQXFCO0FBQ25CLFVBQUlDLGdCQUFnQixHQUFHaEIsSUFBSSxDQUFDZSxVQUFMLENBQWdCYixZQUFoQixFQUE4QlcsYUFBOUIsQ0FBdkI7QUFDQSx5Q0FBd0JHLGdCQUF4QjtBQUNEOztBQUNELFFBQUloQixJQUFJLENBQUNpQixPQUFMLElBQWdCLE9BQU9qQixJQUFJLENBQUNpQixPQUFaLEtBQXdCLFVBQTVDLEVBQXdEO0FBQ3RELDZCQUFZLE1BQU07QUFDaEJqQixRQUFBQSxJQUFJLENBQUNpQixPQUFMLENBQWFKLGFBQWI7QUFDRCxPQUZEO0FBR0Q7O0FBQ0QsV0FBT0EsYUFBUDtBQUNEOztBQUVELFNBQU8saUNBQWNaLFlBQWQsQ0FBUDtBQUNELEMsQ0FFRDtBQUNBO0FBQ0E7OztBQUNPLFNBQVNpQixVQUFULENBQW9CQyxHQUFwQixFQUF5QjtBQUM5QixNQUFJQyxZQUFZLEdBQUcsRUFBbkI7QUFFQSxRQUFNQyxJQUFJLEdBQUcsSUFBSUMsR0FBSixFQUFiOztBQUNBLFdBQVNDLEtBQVQsQ0FBZUMsSUFBZixFQUFxQjtBQUNuQixRQUFJSCxJQUFJLENBQUNJLEdBQUwsQ0FBU0QsSUFBVCxDQUFKLEVBQW9CO0FBQ2xCO0FBQ0Q7O0FBQ0RILElBQUFBLElBQUksQ0FBQ0ssR0FBTCxDQUFTRixJQUFUO0FBQ0EsUUFBSUcsU0FBUyxHQUFHLElBQUlMLEdBQUosQ0FBUUUsSUFBSSxDQUFDRyxTQUFiLENBQWhCOztBQUNBLFNBQUssSUFBSUMsQ0FBVCxJQUFjVCxHQUFHLENBQUNVLE9BQUosQ0FBWUMsTUFBWixFQUFkLEVBQW9DO0FBQ2xDLFVBQUlILFNBQVMsQ0FBQ0YsR0FBVixDQUFjLDhCQUFZRyxDQUFDLENBQUNHLEVBQWQsQ0FBZCxDQUFKLEVBQXNDO0FBQ3BDUixRQUFBQSxLQUFLLENBQUNLLENBQUQsQ0FBTDtBQUNEO0FBQ0Y7O0FBQ0QsUUFBSUosSUFBSSxDQUFDUSxLQUFULEVBQWdCO0FBQ2RULE1BQUFBLEtBQUssQ0FBQ0MsSUFBSSxDQUFDUSxLQUFOLENBQUw7QUFDRDs7QUFFRCxRQUFJUixJQUFJLENBQUNULFVBQVQsRUFBcUI7QUFDbkJLLE1BQUFBLFlBQVksQ0FBQ2EsSUFBYixDQUFrQlQsSUFBSSxDQUFDVCxVQUF2QjtBQUNEOztBQUVELFFBQUlJLEdBQUcsQ0FBQ2Usa0JBQUosQ0FBdUJULEdBQXZCLENBQTJCLDhCQUFZRCxJQUFJLENBQUNPLEVBQWpCLENBQTNCLENBQUosRUFBc0Q7QUFDcERSLE1BQUFBLEtBQUssQ0FBQ0osR0FBRyxDQUFDVSxPQUFKLENBQVlNLEdBQVosQ0FBZ0JoQixHQUFHLENBQUNlLGtCQUFKLENBQXVCQyxHQUF2QixDQUEyQiw4QkFBWVgsSUFBSSxDQUFDTyxFQUFqQixDQUEzQixDQUFoQixDQUFELENBQUw7QUFDRDtBQUNGOztBQUVELE9BQUssSUFBSVAsSUFBVCxJQUFpQkwsR0FBRyxDQUFDVSxPQUFKLENBQVlDLE1BQVosRUFBakIsRUFBdUM7QUFDckMsUUFBSSxDQUFDWCxHQUFHLENBQUNpQixjQUFKLENBQW1CWCxHQUFuQixDQUF1QkQsSUFBSSxDQUFDTyxFQUE1QixDQUFMLEVBQXNDO0FBQ3BDUixNQUFBQSxLQUFLLENBQUNDLElBQUQsQ0FBTDtBQUNEO0FBQ0Y7O0FBRURMLEVBQUFBLEdBQUcsQ0FBQ2tCLE9BQUosR0FBY2pCLFlBQWQ7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbIi8vIEBub2Zsb3dcbmltcG9ydCB7d2l0aERlcHMsIHdpdGhVbml2ZXJzYWxNaWRkbGV3YXJlLCB3aXRoQ2xlYW51cH0gZnJvbSAnLi9jb3JlLmpzJztcbmltcG9ydCB7ZGVjbGFyZVBsdWdpbn0gZnJvbSAnLi9jcmVhdGUtcGx1Z2luLmpzJztcblxuaW1wb3J0IHtnZXRUb2tlblJlZn0gZnJvbSAnLi9jcmVhdGUtdG9rZW4uanMnO1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUGx1Z2luKG9wdHMpIHtcbiAgZnVuY3Rpb24qIExlZ2FjeVBsdWdpbigpIHtcbiAgICBsZXQgcmVzb2x2ZWREZXBzID0ge307XG4gICAgY29uc3QgZGVwS2V5cyA9IG9wdHMuZGVwcyA/IE9iamVjdC5rZXlzKG9wdHMuZGVwcykgOiBbXTtcbiAgICBpZiAoZGVwS2V5cy5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IGRlcHMgPSB5aWVsZCB3aXRoRGVwcyhkZXBLZXlzLm1hcCgoa2V5KSA9PiBvcHRzLmRlcHNba2V5XSkpO1xuICAgICAgZGVwcy5mb3JFYWNoKChkZXAsIGkpID0+IHtcbiAgICAgICAgcmVzb2x2ZWREZXBzW2RlcEtleXNbaV1dID0gZGVwO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGxldCBwcm92aWRlZFZhbHVlO1xuICAgIGlmIChvcHRzLnByb3ZpZGVzKSB7XG4gICAgICBwcm92aWRlZFZhbHVlID0gb3B0cy5wcm92aWRlcyhyZXNvbHZlZERlcHMpO1xuICAgIH1cbiAgICBpZiAob3B0cy5taWRkbGV3YXJlKSB7XG4gICAgICBsZXQgbGVnYWN5TWlkZGxld2FyZSA9IG9wdHMubWlkZGxld2FyZShyZXNvbHZlZERlcHMsIHByb3ZpZGVkVmFsdWUpO1xuICAgICAgd2l0aFVuaXZlcnNhbE1pZGRsZXdhcmUobGVnYWN5TWlkZGxld2FyZSk7XG4gICAgfVxuICAgIGlmIChvcHRzLmNsZWFudXAgJiYgdHlwZW9mIG9wdHMuY2xlYW51cCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgd2l0aENsZWFudXAoKCkgPT4ge1xuICAgICAgICBvcHRzLmNsZWFudXAocHJvdmlkZWRWYWx1ZSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHByb3ZpZGVkVmFsdWU7XG4gIH1cblxuICByZXR1cm4gZGVjbGFyZVBsdWdpbihMZWdhY3lQbHVnaW4pO1xufVxuXG4vLyBUaGUgY29yZSBpbXBsZW1lbnRhdGlvbiB5aWVsZHMgYSB0b3BvbG9naWNhbCBvcmRlciBvZiBtaWRkbGV3YXJlLCBob3dldmVyXG4vLyBpdCBkaWZmZXJzIGZyb20gdGhlIG9sZCBpbXBsZW1lbnRhdGlvbi4gSW4gb3JkZXIgdG8gbWFpbnRhaW4gY29tcGF0aWJpbGl0eVxuLy8gd2l0aCBleGlzdGluZyBhcHBzLCB3ZSBzaG91bGQgc29ydCB0aGlzIGluIHRoZSBzYW1lIHdheVxuZXhwb3J0IGZ1bmN0aW9uIHNvcnRMZWdhY3koYXBwKSB7XG4gIGxldCBsZWdhY3lTb3J0ZWQgPSBbXTtcblxuICBjb25zdCBzZWVuID0gbmV3IFNldCgpO1xuICBmdW5jdGlvbiB2aXNpdCh0YXNrKSB7XG4gICAgaWYgKHNlZW4uaGFzKHRhc2spKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHNlZW4uYWRkKHRhc2spO1xuICAgIGxldCByZXF1ZXN0ZWQgPSBuZXcgU2V0KHRhc2sucmVxdWVzdGVkKTtcbiAgICBmb3IgKGxldCB0IG9mIGFwcC50YXNrTWFwLnZhbHVlcygpKSB7XG4gICAgICBpZiAocmVxdWVzdGVkLmhhcyhnZXRUb2tlblJlZih0LmlkKSkpIHtcbiAgICAgICAgdmlzaXQodCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0YXNrLmNoaWxkKSB7XG4gICAgICB2aXNpdCh0YXNrLmNoaWxkKTtcbiAgICB9XG5cbiAgICBpZiAodGFzay5taWRkbGV3YXJlKSB7XG4gICAgICBsZWdhY3lTb3J0ZWQucHVzaCh0YXNrLm1pZGRsZXdhcmUpO1xuICAgIH1cblxuICAgIGlmIChhcHAuZW5oYW5jZXJDaGFpblRhaWxzLmhhcyhnZXRUb2tlblJlZih0YXNrLmlkKSkpIHtcbiAgICAgIHZpc2l0KGFwcC50YXNrTWFwLmdldChhcHAuZW5oYW5jZXJDaGFpblRhaWxzLmdldChnZXRUb2tlblJlZih0YXNrLmlkKSkpKTtcbiAgICB9XG4gIH1cblxuICBmb3IgKGxldCB0YXNrIG9mIGFwcC50YXNrTWFwLnZhbHVlcygpKSB7XG4gICAgaWYgKCFhcHAuZW5oYW5jZXJUb2tlbnMuaGFzKHRhc2suaWQpKSB7XG4gICAgICB2aXNpdCh0YXNrKTtcbiAgICB9XG4gIH1cblxuICBhcHAucGx1Z2lucyA9IGxlZ2FjeVNvcnRlZDtcbn1cbiJdfQ==