"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.TimingToken = void 0;

var _createPlugin = require("../create-plugin");

var _memoize = require("../memoize");

var _createToken = require("../create-token");

var _now = require("../utils/now.js");

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
class Timing {
  constructor() {
    this.start = (0, _now.now)();
    this.render = deferred();
    this.end = deferred();
    this.downstream = deferred();
    this.upstream = deferred();
    this.upstreamStart = -1;
    this.middleware = [];
    this.prepass = [];
    this.prepassMarked = false;
    this.prepassStart = -1;
  }

  markPrepass(pendingSize) {
    if (!this.prepassMarked) {
      this.prepassMarked = true;
      this.prepassStart = (0, _now.now)();
    } else {
      this.prepass.push({
        duration: (0, _now.now)() - this.prepassStart,
        pendingSize: pendingSize || 0
      });
      this.prepassMarked = false;
      this.prepassStart = -1;
    }
  }

}

const timing = {
  from: (0, _memoize.memoize)(() => new Timing())
};
const TimingToken = (0, _createToken.createToken)('TimingToken');
exports.TimingToken = TimingToken;

function middleware(ctx, next) {
  ctx.memoized = new Map();
  const {
    start,
    render,
    end,
    downstream,
    upstream,
    middleware,
    prepass,
    markPrepass
  } = timing.from(ctx);
  ctx.timing = {
    start,
    render: render.promise,
    end: end.promise,
    downstream: downstream.promise,
    upstream: upstream.promise,
    middleware,
    prepass,
    markPrepass
  };
  return next().then(() => {
    const upstreamTime = (0, _now.now)() - timing.from(ctx).upstreamStart;
    upstream.resolve(upstreamTime);
    const endTime = (0, _now.now)() - ctx.timing.start;
    end.resolve(endTime);
  }).catch(e => {
    // currently we only resolve upstream and downstream when the request does not error
    // we should however always resolve the request end timing
    if (e && e.status) {
      // this ensures any logging / metrics based on ctx.status will recieve the correct status code
      ctx.status = e.status;
    }

    const endTime = (0, _now.now)() - ctx.timing.start;
    end.resolve(endTime);
    throw e;
  });
}

var _default = (0, _createPlugin.createPlugin)({
  provides: () => timing,
  middleware: () => middleware
});

exports.default = _default;

function deferred() {
  let resolve = () => {};

  let reject = () => {};

  const promise = new Promise((res, rej) => {
    resolve = res;
    reject = rej;
  });
  return {
    promise,
    resolve,
    reject
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wbHVnaW5zL3RpbWluZy5qcyJdLCJuYW1lcyI6WyJUaW1pbmciLCJjb25zdHJ1Y3RvciIsInN0YXJ0IiwicmVuZGVyIiwiZGVmZXJyZWQiLCJlbmQiLCJkb3duc3RyZWFtIiwidXBzdHJlYW0iLCJ1cHN0cmVhbVN0YXJ0IiwibWlkZGxld2FyZSIsInByZXBhc3MiLCJwcmVwYXNzTWFya2VkIiwicHJlcGFzc1N0YXJ0IiwibWFya1ByZXBhc3MiLCJwZW5kaW5nU2l6ZSIsInB1c2giLCJkdXJhdGlvbiIsInRpbWluZyIsImZyb20iLCJUaW1pbmdUb2tlbiIsImN0eCIsIm5leHQiLCJtZW1vaXplZCIsIk1hcCIsInByb21pc2UiLCJ0aGVuIiwidXBzdHJlYW1UaW1lIiwicmVzb2x2ZSIsImVuZFRpbWUiLCJjYXRjaCIsImUiLCJzdGF0dXMiLCJwcm92aWRlcyIsInJlamVjdCIsIlByb21pc2UiLCJyZXMiLCJyZWoiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFPQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFWQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQU1BLE1BQU1BLE1BQU4sQ0FBYTtBQUNYQyxFQUFBQSxXQUFXLEdBQUc7QUFDWixTQUFLQyxLQUFMLEdBQWEsZUFBYjtBQUNBLFNBQUtDLE1BQUwsR0FBY0MsUUFBUSxFQUF0QjtBQUNBLFNBQUtDLEdBQUwsR0FBV0QsUUFBUSxFQUFuQjtBQUNBLFNBQUtFLFVBQUwsR0FBa0JGLFFBQVEsRUFBMUI7QUFDQSxTQUFLRyxRQUFMLEdBQWdCSCxRQUFRLEVBQXhCO0FBQ0EsU0FBS0ksYUFBTCxHQUFxQixDQUFDLENBQXRCO0FBQ0EsU0FBS0MsVUFBTCxHQUFrQixFQUFsQjtBQUNBLFNBQUtDLE9BQUwsR0FBZSxFQUFmO0FBQ0EsU0FBS0MsYUFBTCxHQUFxQixLQUFyQjtBQUNBLFNBQUtDLFlBQUwsR0FBb0IsQ0FBQyxDQUFyQjtBQUNEOztBQUVEQyxFQUFBQSxXQUFXLENBQUNDLFdBQUQsRUFBYztB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LE1BQU0sR0FBR0csR0FBVDtBQUNELEdBSGUsQ0FBaEI7QUFJQSxTQUFPO0FBQ0xaLElBQUFBLE9BREs7QUFFTEcsSUFBQUEsT0FGSztBQUdMTSxJQUFBQTtBQUhLLEdBQVA7QUFLRCIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBDb3B5cmlnaHQgKGMpIDIwMTggVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAbm9mbG93XG4gKi9cbmltcG9ydCB7Y3JlYXRlUGx1Z2lufSBmcm9tICcuLi9jcmVhdGUtcGx1Z2luJztcbmltcG9ydCB7bWVtb2l6ZX0gZnJvbSAnLi4vbWVtb2l6ZSc7XG5pbXBvcnQge2NyZWF0ZVRva2VufSBmcm9tICcuLi9jcmVhdGUtdG9rZW4nO1xuaW1wb3J0IHtub3d9IGZyb20gJy4uL3V0aWxzL25vdy5qcyc7XG5cbmNsYXNzIFRpbWluZyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuc3RhcnQgPSBub3coKTtcbiAgICB0aGlzLnJlbmRlciA9IGRlZmVycmVkKCk7XG4gICAgdGhpcy5lbmQgPSBkZWZlcnJlZCgpO1xuICAgIHRoaXMuZG93bnN0cmVhbSA9IGRlZmVycmVkKCk7XG4gICAgdGhpcy51cHN0cmVhbSA9IGRlZmVycmVkKCk7XG4gICAgdGhpcy51cHN0cmVhbVN0YXJ0ID0gLTE7XG4gICAgdGhpcy5taWRkbGV3YXJlID0gW107XG4gICAgdGhpcy5wcmVwYXNzID0gW107XG4gICAgdGhpcy5wcmVwYXNzTWFya2VkID0gZmFsc2U7XG4gICAgdGhpcy5wcmVwYXNzU3RhcnQgPSAtMTtcbiAgfVxuXG4gIG1hcmtQcmVwYXNzKHBlbmRpbmdTaXplKSB7XG4gICAgaWYgKCF0aGlzLnByZXBhc3NNYXJrZWQpIHtcbiAgICAgIHRoaXMucHJlcGFzc01hcmtlZCA9IHRydWU7XG4gICAgICB0aGlzLnByZXBhc3NTdGFydCA9IG5vdygpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnByZXBhc3MucHVzaCh7XG4gICAgICAgIGR1cmF0aW9uOiBub3coKSAtIHRoaXMucHJlcGFzc1N0YXJ0LFxuICAgICAgICBwZW5kaW5nU2l6ZTogcGVuZGluZ1NpemUgfHwgMCxcbiAgICAgIH0pO1xuICAgICAgdGhpcy5wcmVwYXNzTWFya2VkID0gZmFsc2U7XG4gICAgICB0aGlzLnByZXBhc3NTdGFydCA9IC0xO1xuICAgIH1cbiAgfVxufVxuXG5jb25zdCB0aW1pbmcgPSB7XG4gIGZyb206IG1lbW9pemUoKCkgPT4gbmV3IFRpbWluZygpKSxcbn07XG5cbmV4cG9ydCBjb25zdCBUaW1pbmdUb2tlbiA9IGNyZWF0ZVRva2VuKCdUaW1pbmdUb2tlbicpO1xuXG5mdW5jdGlvbiBtaWRkbGV3YXJlKGN0eCwgbmV4dCkge1xuICBjdHgubWVtb2l6ZWQgPSBuZXcgTWFwKCk7XG4gIGNvbnN0IHtcbiAgICBzdGFydCxcbiAgICByZW5kZXIsXG4gICAgZW5kLFxuICAgIGRvd25zdHJlYW0sXG4gICAgdXBzdHJlYW0sXG4gICAgbWlkZGxld2FyZSxcbiAgICBwcmVwYXNzLFxuICAgIG1hcmtQcmVwYXNzLFxuICB9ID0gdGltaW5nLmZyb20oY3R4KTtcbiAgY3R4LnRpbWluZyA9IHtcbiAgICBzdGFydCxcbiAgICByZW5kZXI6IHJlbmRlci5wcm9taXNlLFxuICAgIGVuZDogZW5kLnByb21pc2UsXG4gICAgZG93bnN0cmVhbTogZG93bnN0cmVhbS5wcm9taXNlLFxuICAgIHVwc3RyZWFtOiB1cHN0cmVhbS5wcm9taXNlLFxuICAgIG1pZGRsZXdhcmUsXG4gICAgcHJlcGFzcyxcbiAgICBtYXJrUHJlcGFzcyxcbiAgfTtcbiAgcmV0dXJuIG5leHQoKVxuICAgIC50aGVuKCgpID0+IHtcbiAgICAgIGNvbnN0IHVwc3RyZWFtVGltZSA9IG5vdygpIC0gdGltaW5nLmZyb20oY3R4KS51cHN0cmVhbVN0YXJ0O1xuICAgICAgdXBzdHJlYW0ucmVzb2x2ZSh1cHN0cmVhbVRpbWUpO1xuICAgICAgY29uc3QgZW5kVGltZSA9IG5vdygpIC0gY3R4LnRpbWluZy5zdGFydDtcbiAgICAgIGVuZC5yZXNvbHZlKGVuZFRpbWUpO1xuICAgIH0pXG4gICAgLmNhdGNoKChlKSA9PiB7XG4gICAgICAvLyBjdXJyZW50bHkgd2Ugb25seSByZXNvbHZlIHVwc3RyZWFtIGFuZCBkb3duc3RyZWFtIHdoZW4gdGhlIHJlcXVlc3QgZG9lcyBub3QgZXJyb3JcbiAgICAgIC8vIHdlIHNob3VsZCBob3dldmVyIGFsd2F5cyByZXNvbHZlIHRoZSByZXF1ZXN0IGVuZCB0aW1pbmdcbiAgICAgIGlmIChlICYmIGUuc3RhdHVzKSB7XG4gICAgICAgIC8vIHRoaXMgZW5zdXJlcyBhbnkgbG9nZ2luZyAvIG1ldHJpY3MgYmFzZWQgb24gY3R4LnN0YXR1cyB3aWxsIHJlY2lldmUgdGhlIGNvcnJlY3Qgc3RhdHVzIGNvZGVcbiAgICAgICAgY3R4LnN0YXR1cyA9IGUuc3RhdHVzO1xuICAgICAgfVxuICAgICAgY29uc3QgZW5kVGltZSA9IG5vdygpIC0gY3R4LnRpbWluZy5zdGFydDtcbiAgICAgIGVuZC5yZXNvbHZlKGVuZFRpbWUpO1xuICAgICAgdGhyb3cgZTtcbiAgICB9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlUGx1Z2luKHtcbiAgcHJvdmlkZXM6ICgpID0+IHRpbWluZyxcbiAgbWlkZGxld2FyZTogKCkgPT4gbWlkZGxld2FyZSxcbn0pO1xuXG5mdW5jdGlvbiBkZWZlcnJlZCgpIHtcbiAgbGV0IHJlc29sdmUgPSAoKSA9PiB7fTtcbiAgbGV0IHJlamVjdCA9ICgpID0+IHt9O1xuICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UoKHJlcywgcmVqKSA9PiB7XG4gICAgcmVzb2x2ZSA9IHJlcztcbiAgICByZWplY3QgPSByZWo7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHByb21pc2UsXG4gICAgcmVzb2x2ZSxcbiAgICByZWplY3QsXG4gIH07XG59XG4iXX0=