"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createServerRenderPlugin;

var _now = require("../utils/now.js");

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
function createServerRenderPlugin(app) {
  return function serverRenderPlugin({
    render,
    timing
  }) {
    return async function renderer(ctx, next) {
      app._setRef();

      app.renderSetupCtx = ctx; // Element wrappers should be added in *reverse* topological order so that
      // the resulting element tree is in topological order during renders.
      // For example, if plugin B depends on plugin A, the tree should be:
      // <AProvider>
      //   <BProvider>{root}</BProvider>
      // </APRovider>
      // In this case, B provider can depend on the context of A provider.

      for (var i = app.renderSetup.length - 1; i >= 0; i--) {
        const wrapper = app.renderSetup[i];
        const result = wrapper(ctx.element);

        if (result !== void 0) {
          ctx.element = result;
        }
      }

      app.renderSetupCtx = void 0;

      app._clearRef();

      const timer = timing.from(ctx);
      timer.downstream.resolve((0, _now.now)() - timer.start);
      let renderTime = null;

      if (ctx.element && !ctx.body && ctx.respond !== false) {
        const renderStart = (0, _now.now)();
        ctx.rendered = await render(ctx.element, ctx);
        renderTime = (0, _now.now)() - renderStart;
      }

      app._setRef();

      app.SSREffectCtx = ctx;

      for (const effect of ctx.postRenderEffects) {
        effect();
      }

      app.SSREffectCtx = void 0;

      app._clearRef();

      timer.upstreamStart = (0, _now.now)();
      await next();

      if (ctx.element && typeof renderTime === 'number') {
        timer.render.resolve(renderTime);
      }
    };
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wbHVnaW5zL3NlcnZlci1yZW5kZXJlci5qcyJdLCJuYW1lcyI6WyJjcmVhdGVTZXJ2ZXJSZW5kZXJQbHVnaW4iLCJhcHAiLCJzZXJ2ZXJSZW5kZXJQbHVnaW4iLCJyZW5kZXIiLCJ0aW1pbmciLCJyZW5kZXJlciIsImN0eCIsIm5leHQiLCJfc2V0UmVmIiwicmVuZGVyU2V0dXBDdHgiLCJpIiwicmVuZGVyU2V0dXAiLCJsZW5ndGgiLCJ3cmFwcGVyIiwicmVzdWx0IiwiZWxlbWVudCIsIl9jbGVhclJlZiIsInRpbWVyIiwiZnJvbSIsImRvd25zdHJlYW0iLCJyZXNvbHZlIiwic3RhcnQiLCJyZW5kZXJUaW1lIiwiYm9keSIsInJlc3BvbmQiLCJyZW5kZXJTdGFydCIsInJlbmRlcmVkIiwiU1NSRWZmZWN0Q3R4IiwiZWZmZWN0IiwicG9zdFJlbmRlckVmZmVjdHMiLCJ1cHN0cmVhbVN0YXJ0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBUUE7O0FBUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJZSxTQUFTQSx3QkFBVCxDQUFrQ0MsR0FBbEMsRUFBdUM7QUFDcEQsU0FBTyxTQUFTQyxrQkFBVCxDQUE0QjtBQUFDQyxJQUFBQSxNQUFEO0FBQVNDLElBQUFBO0FBQVQsR0FBNUIsRUFBOEM7QUFDbkQsV0FBTyxlQUFlQyxRQUFmLENBQXdCQyxHQUF4QixFQUE2QkMsSUFBN0IsRUFBbUM7QUFDeENOLE1BQUFBLEdBQUcsQ0FBQ08sT0FBSjs7QUFDQVAsTUFBQUEsR0FBRyxDQUFDUSxjQUFKLEdBQXFCSCxHQUFyQixDQUZ3QyxDQUd4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSxXQUFLLElBQUlJLENBQUMsR0FBR1QsR0FBRyxDQUFDVSxXQUFKLENBQWdCQyxNQUFoQixHQUF5QixDQUF0QyxFQUF5Q0YsQ0FBQyxJQUFJLENBQTlDLEVBQWlEQSxDQUFDLEVBQWxELEVBQXNEO0FBQ3BELGNBQU1HLE9BQU8sR0FBR1osR0FBRyxDQUFDVSxXQUFKLENBQWdCRCxDQUFoQixDQUFoQjtBQUNBLGNBQU1JLE1BQU0sR0FBR0QsT0FBTyxDQUFDUCxHQUFHLENBQUNTLE9BQUwsQ0FBdEI7O0FBQ0EsWUFBSUQsTUFBTSxLQUFLLEtBQUssQ0FBcEIsRUFBdUI7QUFDckJSLFVBQUFBLEdBQUcsQ0FBQ1MsT0FBSixHQUFjRCxNQUFkO0FBQ0Q7QUFDRjs7QUFDRGIsTUFBQUEsR0FBRyxDQUFDUSxjQUFKLEdBQXFCLEtBQUssQ0FBMUI7O0FBQ0FSLE1BQUFBLEdBQUcsQ0FBQ2UsU0FBSjs7QUFFQSxZQUFNQyxLQUFLLEdBQUdiLE1BQU0sQ0FBQ2MsSUFBUCxDQUFZWixHQUFaLENBQWQ7QUFDQVcsTUFBQUEsS0FBSyxDQUFDRSxVQUFOLENBQWlCQyxPQUFqQixDQUF5QixrQkFBUUgsS0FBSyxDQUFDSSxLQUF2QztBQUVBLFVBQUlDLFVBQVUsR0FBRyxJQUFqQjs7QUFDQSxVQUFJaEIsR0FBRyxDQUFDUyxPQUFKLElBQWUsQ0FBQ1QsR0FBRyxDQUFDaUIsSUFBcEIsSUFBNEJqQixHQUFHLENBQUNrQixPQUFKLEtBQWdCLEtBQWhELEVBQXVEO0FBQ3JELGNBQU1DLFdBQVcsR0FBRyxlQUFwQjtBQUNBbkIsUUFBQUEsR0FBRyxDQUFDb0IsUUFBSixHQUFlLE1BQU12QixNQUFNLENBQUNHLEdBQUcsQ0FBQ1MsT0FBTCxFQUFjVCxHQUFkLENBQTNCO0FBQ0FnQixRQUFBQSxVQUFVLEdBQUcsa0JBQVFHLFdBQXJCO0FBQ0Q7O0FBRUR4QixNQUFBQSxHQUFHLENBQUNPLE9BQUo7O0FBQ0FQLE1BQUFBLEdBQUcsQ0FBQzBCLFlBQUosR0FBbUJyQixHQUFuQjs7QUFDQSxXQUFLLE1BQU1zQixNQUFYLElBQXFCdEIsR0FBRyxDQUFDdUIsaUJBQXpCLEVBQTRDO0FBQzFDRCxRQUFBQSxNQUFNO0FBQ1A7O0FBQ0QzQixNQUFBQSxHQUFHLENBQUMwQixZQUFKLEdBQW1CLEtBQUssQ0FBeEI7O0FBQ0ExQixNQUFBQSxHQUFHLENBQUNlLFNBQUo7O0FBRUFDLE1BQUFBLEtBQUssQ0FBQ2EsYUFBTixHQUFzQixlQUF0QjtBQUNBLFlBQU12QixJQUFJLEVBQVY7O0FBRUEsVUFBSUQsR0FBRyxDQUFDUyxPQUFKLElBQWUsT0FBT08sVUFBUCxLQUFzQixRQUF6QyxFQUFtRDtBQUNqREwsUUFBQUEsS0FBSyxDQUFDZCxNQUFOLENBQWFpQixPQUFiLENBQXFCRSxVQUFyQjtBQUNEO0FBQ0YsS0E1Q0Q7QUE2Q0QsR0E5Q0Q7QUErQ0QiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQ29weXJpZ2h0IChjKSAyMDE4IFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQG5vZmxvd1xuICovXG5cbmltcG9ydCB7bm93fSBmcm9tICcuLi91dGlscy9ub3cuanMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVTZXJ2ZXJSZW5kZXJQbHVnaW4oYXBwKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzZXJ2ZXJSZW5kZXJQbHVnaW4oe3JlbmRlciwgdGltaW5nfSkge1xuICAgIHJldHVybiBhc3luYyBmdW5jdGlvbiByZW5kZXJlcihjdHgsIG5leHQpIHtcbiAgICAgIGFwcC5fc2V0UmVmKCk7XG4gICAgICBhcHAucmVuZGVyU2V0dXBDdHggPSBjdHg7XG4gICAgICAvLyBFbGVtZW50IHdyYXBwZXJzIHNob3VsZCBiZSBhZGRlZCBpbiAqcmV2ZXJzZSogdG9wb2xvZ2ljYWwgb3JkZXIgc28gdGhhdFxuICAgICAgLy8gdGhlIHJlc3VsdGluZyBlbGVtZW50IHRyZWUgaXMgaW4gdG9wb2xvZ2ljYWwgb3JkZXIgZHVyaW5nIHJlbmRlcnMuXG4gICAgICAvLyBGb3IgZXhhbXBsZSwgaWYgcGx1Z2luIEIgZGVwZW5kcyBvbiBwbHVnaW4gQSwgdGhlIHRyZWUgc2hvdWxkIGJlOlxuICAgICAgLy8gPEFQcm92aWRlcj5cbiAgICAgIC8vICAgPEJQcm92aWRlcj57cm9vdH08L0JQcm92aWRlcj5cbiAgICAgIC8vIDwvQVBSb3ZpZGVyPlxuICAgICAgLy8gSW4gdGhpcyBjYXNlLCBCIHByb3ZpZGVyIGNhbiBkZXBlbmQgb24gdGhlIGNvbnRleHQgb2YgQSBwcm92aWRlci5cbiAgICAgIGZvciAodmFyIGkgPSBhcHAucmVuZGVyU2V0dXAubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgY29uc3Qgd3JhcHBlciA9IGFwcC5yZW5kZXJTZXR1cFtpXTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gd3JhcHBlcihjdHguZWxlbWVudCk7XG4gICAgICAgIGlmIChyZXN1bHQgIT09IHZvaWQgMCkge1xuICAgICAgICAgIGN0eC5lbGVtZW50ID0gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBhcHAucmVuZGVyU2V0dXBDdHggPSB2b2lkIDA7XG4gICAgICBhcHAuX2NsZWFyUmVmKCk7XG5cbiAgICAgIGNvbnN0IHRpbWVyID0gdGltaW5nLmZyb20oY3R4KTtcbiAgICAgIHRpbWVyLmRvd25zdHJlYW0ucmVzb2x2ZShub3coKSAtIHRpbWVyLnN0YXJ0KTtcblxuICAgICAgbGV0IHJlbmRlclRpbWUgPSBudWxsO1xuICAgICAgaWYgKGN0eC5lbGVtZW50ICYmICFjdHguYm9keSAmJiBjdHgucmVzcG9uZCAhPT0gZmFsc2UpIHtcbiAgICAgICAgY29uc3QgcmVuZGVyU3RhcnQgPSBub3coKTtcbiAgICAgICAgY3R4LnJlbmRlcmVkID0gYXdhaXQgcmVuZGVyKGN0eC5lbGVtZW50LCBjdHgpO1xuICAgICAgICByZW5kZXJUaW1lID0gbm93KCkgLSByZW5kZXJTdGFydDtcbiAgICAgIH1cblxuICAgICAgYXBwLl9zZXRSZWYoKTtcbiAgICAgIGFwcC5TU1JFZmZlY3RDdHggPSBjdHg7XG4gICAgICBmb3IgKGNvbnN0IGVmZmVjdCBvZiBjdHgucG9zdFJlbmRlckVmZmVjdHMpIHtcbiAgICAgICAgZWZmZWN0KCk7XG4gICAgICB9XG4gICAgICBhcHAuU1NSRWZmZWN0Q3R4ID0gdm9pZCAwO1xuICAgICAgYXBwLl9jbGVhclJlZigpO1xuXG4gICAgICB0aW1lci51cHN0cmVhbVN0YXJ0ID0gbm93KCk7XG4gICAgICBhd2FpdCBuZXh0KCk7XG5cbiAgICAgIGlmIChjdHguZWxlbWVudCAmJiB0eXBlb2YgcmVuZGVyVGltZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgdGltZXIucmVuZGVyLnJlc29sdmUocmVuZGVyVGltZSk7XG4gICAgICB9XG4gICAgfTtcbiAgfTtcbn1cbiJdfQ==