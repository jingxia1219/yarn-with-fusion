"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _jsxRuntime = require("react/jsx-runtime");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const prepared = (sideEffect, opts = {}) => OriginalComponent => {
  opts = Object.assign({
    boundary: false,
    defer: false,
    componentDidMount: true,
    componentWillReceiveProps: false,
    componentDidUpdate: false,
    contextTypes: {},
    forceUpdate: false
  }, opts);
  const displayName = OriginalComponent.displayName || OriginalComponent.name || '';

  class PreparedComponent extends React.Component {
    componentDidMount() {
      if (opts.componentDidMount) {
        Promise.resolve(sideEffect(this.props, this.context)).then(() => {
          if (opts.forceUpdate) {
            this.forceUpdate();
          }
        });
      }
    }

    UNSAFE_componentWillReceiveProps(nextProps, nextContext) {
      if (opts.componentWillReceiveProps) {
        sideEffect(nextProps, nextContext);
      }
    }

    componentDidUpdate() {
      if (opts.componentDidUpdate) {
        sideEffect(this.props, this.context);
      }
    }

    render() {
      const effectId = this.props.effectId || 'defaultId';
      const prepareState = this.context.__PREPARE_STATE__;

      if (prepareState) {
        if (opts.defer || opts.boundary) {
          // skip prepare if defer or boundary
          return null;
        }

        const isResolved = prepareState.isResolved(PreparedComponent, effectId, () => sideEffect(this.props, this.context));

        if (!isResolved) {
          // Wait until resolved
          return null;
        }
      }

      return /*#__PURE__*/(0, _jsxRuntime.jsx)(OriginalComponent, { ...this.props
      });
    }

  }

  _defineProperty(PreparedComponent, "contextTypes", {
    __PREPARE_STATE__: _propTypes.default.any,
    ...opts.contextTypes
  });

  _defineProperty(PreparedComponent, "displayName", `PreparedComponent(${displayName})`);

  return PreparedComponent;
};

var _default = prepared;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hc3luYy9wcmVwYXJlZC5qcyJdLCJuYW1lcyI6WyJwcmVwYXJlZCIsInNpZGVFZmZlY3QiLCJvcHRzIiwiT3JpZ2luYWxDb21wb25lbnQiLCJPYmplY3QiLCJhc3NpZ24iLCJib3VuZGFyeSIsImRlZmVyIiwiY29tcG9uZW50RGlkTW91bnQiLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiY29tcG9uZW50RGlkVXBkYXRlIiwiY29udGV4dFR5cGVzIiwiZm9yY2VVcGRhdGUiLCJkaXNwbGF5TmFtZSIsIm5hbWUiLCJQcmVwYXJlZENvbXBvbmVudCIsIlJlYWN0IiwiQ29tcG9uZW50IiwiUHJvbWlzZSIsInJlc29sdmUiLCJwcm9wcyIsImNvbnRleHQiLCJ0aGVuIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJuZXh0UHJvcHMiLCJuZXh0Q29udGV4dCIsInJlbmRlciIsImVmZmVjdElkIiwicHJlcGFyZVN0YXRlIiwiX19QUkVQQVJFX1NUQVRFX18iLCJpc1Jlc29sdmVkIiwiUHJvcFR5cGVzIiwiYW55Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBUUE7O0FBQ0E7Ozs7Ozs7Ozs7OztBQVlBLE1BQU1BLFFBQVEsR0FDWixDQUFDQyxVQUFELEVBQStDQyxJQUFtQixHQUFHLEVBQXJFLEtBRUVDLGlCQURGLElBRTBEO0FBQ3hERCxFQUFBQSxJQUFJLEdBQUdFLE1BQU0sQ0FBQ0MsTUFBUCxDQUNMO0FBQ0VDLElBQUFBLFFBQVEsRUFBRSxLQURaO0FBRUVDLElBQUFBLEtBQUssRUFBRSxLQUZUO0FBR0VDLElBQUFBLGlCQUFpQixFQUFFLElBSHJCO0FBSUVDLElBQUFBLHlCQUF5QixFQUFFLEtBSjdCO0FBS0VDLElBQUFBLGtCQUFrQixFQUFFLEtBTHRCO0FBTUVDLElBQUFBLFlBQVksRUFBRSxFQU5oQjtBQU9FQyxJQUFBQSxXQUFXLEVBQUU7QUFQZixHQURLLEVBVUxWLElBVkssQ0FBUDtBQWFBLFFBQU1XLFdBQVcsR0FDZlYsaUJBQWlCLENBQUNVLFdBQWxCLElBQWlDVixpQkFBaUIsQ0FBQ1csSUFBbkQsSUFBMkQsRUFEN0Q7O0FBR0EsUUFBTUMsaUJBQU4sU0FBZ0NDLEtBQUssQ0FBQ0MsU0FBdEMsQ0FBcUQ7QUFDbkRULElBQUFBLGlCQUFpQixHQUFHO0FBQ2xCLFVBQUlOLElBQUksQ0FBQ00saUJBQVQsRUFBNEI7QUFDMUJVLFFBQUFBLE9BQU8sQ0FBQ0MsT0FBUixDQUFnQmxCLFVBQVUsQ0FBQyxLQUFLbUIsS0FBTixFQUFhLEtBQUtDLE9BQWxCLENBQTFCLEVBQXNEQyxJQUF0RCxDQUEyRCxNQUFNO0FBQy9ELGNBQUlwQixJQUFJLENBQUNVLFdBQVQsRUFBc0I7QUFDcEIsaUJBQUtBLFdBQUw7QUFDRDtBQUNGLFNBSkQ7QUFLRDtBQUNGOztBQUVEVyxJQUFBQSxnQ0FBZ0MsQ0FBQ0MsU0FBRCxFQUFZQyxXQUFaLEVBQXlCO0FBQ3ZELFVBQUl2QixJQUFJLENBQUNPLHlCQUFULEVBQW9DO0FBQ2xDUixRQUFBQSxVQUFVLENBQUN1QixTQUFELEVBQVlDLFdBQVosQ0FBVjtBQUNEO0FBQ0Y7O0FBRURmLElBQUFBLGtCQUFrQixHQUFHO0FBQ25CLFVBQUlSLElBQUksQ0FBQ1Esa0JBQVQsRUFBNkI7QUFDM0JULFFBQUFBLFVBQVUsQ0FBQyxLQUFLbUIsS0FBTixFQUFhLEtBQUtDLE9BQWxCLENBQVY7QUFDRDtBQUNGOztBQUVESyxJQUFBQSxNQUFNLEdBQUc7QUFDUCxZQUFNQyxRQUFRLEdBQUcsS0FBS1AsS0FBTCxDQUFXTyxRQUFYLElBQXVCLFdBQXhDO0FBQ0EsWUFBTUMsWUFBWSxHQUFHLEtBQUtQLE9BQUwsQ0FBYVEsaUJBQWxDOztBQUNBLFVBQUlELFlBQUosRUFBa0I7QUFDaEIsWUFBSTFCLElBQUksQ0FBQ0ssS0FBTCxJQUFjTCxJQUFJLENBQUNJLFFBQXZCLEVBQWlDO0FBQy9CO0FBQ0EsaUJBQU8sSUFBUDtBQUNEOztBQUVELGNBQU13QixVQUFVLEdBQUdGLFlBQVksQ0FBQ0UsVUFBYixDQUNqQmYsaUJBRGlCLEVBRWpCWSxRQUZpQixFQUdqQixNQUFNMUIsVUFBVSxDQUFDLEtBQUttQixLQUFOLEVBQWEsS0FBS0MsT0FBbEIsQ0FIQyxDQUFuQjs7QUFNQSxZQUFJLENBQUNTLFVBQUwsRUFBaUI7QUFDZjtBQUNBLGlCQUFPLElBQVA7QUFDRDtBQUNGOztBQUVELDBCQUFPLHFCQUFDLGlCQUFELE9BQXVCLEtBQUtWO0FBQTVCLFFBQVA7QUFDRDs7QUE3Q2tEOztBQWpCRyxrQkFpQmxETCxpQkFqQmtELGtCQWdFaEM7QUFDcEJjLElBQUFBLGlCQUFpQixFQUFFRSxtQkFBVUMsR0FEVDtBQUVwQixPQUFHOUIsSUFBSSxDQUFDUztBQUZZLEdBaEVnQzs7QUFBQSxrQkFpQmxESSxpQkFqQmtELGlCQW9FaEMscUJBQW9CRixXQUFZLEdBcEVBOztBQXVFeEQsU0FBT0UsaUJBQVA7QUFDRCxDQTVFSDs7ZUE4RWVmLFEiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQ29weXJpZ2h0IChjKSAyMDE4IFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqL1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG50eXBlIFByZXBhcmVkT3B0cyA9IHtcbiAgYm91bmRhcnk/OiBib29sZWFuLFxuICBkZWZlcj86IGJvb2xlYW4sXG4gIGNvbXBvbmVudERpZE1vdW50PzogYm9vbGVhbixcbiAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcz86IGJvb2xlYW4sXG4gIGNvbXBvbmVudERpZFVwZGF0ZT86IGJvb2xlYW4sXG4gIGNvbnRleHRUeXBlcz86IE9iamVjdCxcbiAgZm9yY2VVcGRhdGU/OiBib29sZWFuLFxufTtcblxuY29uc3QgcHJlcGFyZWQgPVxuICAoc2lkZUVmZmVjdDogKGFueSwgYW55KSA9PiBhbnkgfCBQcm9taXNlPGFueT4sIG9wdHM/OiBQcmVwYXJlZE9wdHMgPSB7fSkgPT5cbiAgPENvbmZpZz4oXG4gICAgT3JpZ2luYWxDb21wb25lbnQ6IFJlYWN0LkNvbXBvbmVudFR5cGU8Q29uZmlnPlxuICApOiBSZWFjdC5Db21wb25lbnRUeXBlPHsuLi5Db25maWcsIGVmZmVjdElkPzogc3RyaW5nfT4gPT4ge1xuICAgIG9wdHMgPSBPYmplY3QuYXNzaWduKFxuICAgICAge1xuICAgICAgICBib3VuZGFyeTogZmFsc2UsXG4gICAgICAgIGRlZmVyOiBmYWxzZSxcbiAgICAgICAgY29tcG9uZW50RGlkTW91bnQ6IHRydWUsXG4gICAgICAgIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM6IGZhbHNlLFxuICAgICAgICBjb21wb25lbnREaWRVcGRhdGU6IGZhbHNlLFxuICAgICAgICBjb250ZXh0VHlwZXM6IHt9LFxuICAgICAgICBmb3JjZVVwZGF0ZTogZmFsc2UsXG4gICAgICB9LFxuICAgICAgb3B0c1xuICAgICk7XG5cbiAgICBjb25zdCBkaXNwbGF5TmFtZSA9XG4gICAgICBPcmlnaW5hbENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBPcmlnaW5hbENvbXBvbmVudC5uYW1lIHx8ICcnO1xuXG4gICAgY2xhc3MgUHJlcGFyZWRDb21wb25lbnQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8YW55PiB7XG4gICAgICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgaWYgKG9wdHMuY29tcG9uZW50RGlkTW91bnQpIHtcbiAgICAgICAgICBQcm9taXNlLnJlc29sdmUoc2lkZUVmZmVjdCh0aGlzLnByb3BzLCB0aGlzLmNvbnRleHQpKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIGlmIChvcHRzLmZvcmNlVXBkYXRlKSB7XG4gICAgICAgICAgICAgIHRoaXMuZm9yY2VVcGRhdGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMsIG5leHRDb250ZXh0KSB7XG4gICAgICAgIGlmIChvcHRzLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMpIHtcbiAgICAgICAgICBzaWRlRWZmZWN0KG5leHRQcm9wcywgbmV4dENvbnRleHQpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICAgICAgaWYgKG9wdHMuY29tcG9uZW50RGlkVXBkYXRlKSB7XG4gICAgICAgICAgc2lkZUVmZmVjdCh0aGlzLnByb3BzLCB0aGlzLmNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgZWZmZWN0SWQgPSB0aGlzLnByb3BzLmVmZmVjdElkIHx8ICdkZWZhdWx0SWQnO1xuICAgICAgICBjb25zdCBwcmVwYXJlU3RhdGUgPSB0aGlzLmNvbnRleHQuX19QUkVQQVJFX1NUQVRFX187XG4gICAgICAgIGlmIChwcmVwYXJlU3RhdGUpIHtcbiAgICAgICAgICBpZiAob3B0cy5kZWZlciB8fCBvcHRzLmJvdW5kYXJ5KSB7XG4gICAgICAgICAgICAvLyBza2lwIHByZXBhcmUgaWYgZGVmZXIgb3IgYm91bmRhcnlcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IGlzUmVzb2x2ZWQgPSBwcmVwYXJlU3RhdGUuaXNSZXNvbHZlZChcbiAgICAgICAgICAgIFByZXBhcmVkQ29tcG9uZW50LFxuICAgICAgICAgICAgZWZmZWN0SWQsXG4gICAgICAgICAgICAoKSA9PiBzaWRlRWZmZWN0KHRoaXMucHJvcHMsIHRoaXMuY29udGV4dClcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgaWYgKCFpc1Jlc29sdmVkKSB7XG4gICAgICAgICAgICAvLyBXYWl0IHVudGlsIHJlc29sdmVkXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gPE9yaWdpbmFsQ29tcG9uZW50IHsuLi50aGlzLnByb3BzfSAvPjtcbiAgICAgIH1cblxuICAgICAgc3RhdGljIGNvbnRleHRUeXBlcyA9IHtcbiAgICAgICAgX19QUkVQQVJFX1NUQVRFX186IFByb3BUeXBlcy5hbnksXG4gICAgICAgIC4uLm9wdHMuY29udGV4dFR5cGVzLFxuICAgICAgfTtcbiAgICAgIHN0YXRpYyBkaXNwbGF5TmFtZSA9IGBQcmVwYXJlZENvbXBvbmVudCgke2Rpc3BsYXlOYW1lfSlgO1xuICAgIH1cblxuICAgIHJldHVybiBQcmVwYXJlZENvbXBvbmVudDtcbiAgfTtcblxuZXhwb3J0IGRlZmF1bHQgcHJlcGFyZWQ7XG4iXX0=