"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _context = require("./context.js");

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function capitalize(str) {
  return str.replace(/^./, c => c.toUpperCase());
}

var _default = {
  create: (name, mapProvidesToProps, token) => {
    const mapProvides = mapProvidesToProps ? mapProvidesToProps : provides => ({
      [name]: provides
    });
    const _token = token; // Make token constant for flow

    if (_token) {
      // Use new Context through useService hook
      return Component => {
        const Wrapper = props => {
          const service = (0, _context.useService)(_token);
          return /*#__PURE__*/React.createElement(Component, { ...props,
            ...mapProvides(service)
          });
        };

        const displayName = Component.displayName || Component.name || 'Anonymous';
        Wrapper.displayName = `With${capitalize(name)}(${displayName})`;
        return Wrapper;
      };
    } else {
      // Use legacy Context
      return Component => {
        const displayName = Component.displayName || Component.name || 'Anonymous';

        class HOC extends React.Component {
          constructor(props, ctx) {
            super(props, ctx);
            this.provides = ctx[name];
          }

          render() {
            const props = { ...this.props,
              ...mapProvides(this.provides)
            };
            return /*#__PURE__*/React.createElement(Component, props);
          }

        }

        _defineProperty(HOC, "displayName", `With${capitalize(name)}(${displayName})`);

        _defineProperty(HOC, "contextTypes", {
          [name]: _propTypes.default.any.isRequired
        });

        return HOC;
      };
    }
  }
};
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9ob2MuanMiXSwibmFtZXMiOlsiY2FwaXRhbGl6ZSIsInN0ciIsInJlcGxhY2UiLCJjIiwidG9VcHBlckNhc2UiLCJjcmVhdGUiLCJuYW1lIiwibWFwUHJvdmlkZXNUb1Byb3BzIiwidG9rZW4iLCJtYXBQcm92aWRlcyIsInByb3ZpZGVzIiwiX3Rva2VuIiwiQ29tcG9uZW50IiwiV3JhcHBlciIsInByb3BzIiwic2VydmljZSIsIlJlYWN0IiwiY3JlYXRlRWxlbWVudCIsImRpc3BsYXlOYW1lIiwiSE9DIiwiY29uc3RydWN0b3IiLCJjdHgiLCJyZW5kZXIiLCJQcm9wVHlwZXMiLCJhbnkiLCJpc1JlcXVpcmVkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBUUE7O0FBQ0E7O0FBQ0E7Ozs7Ozs7Ozs7QUFHQSxTQUFTQSxVQUFULENBQW9CQyxHQUFwQixFQUF5QztBQUN2QyxTQUFPQSxHQUFHLENBQUNDLE9BQUosQ0FBWSxJQUFaLEVBQW1CQyxDQUFELElBQU9BLENBQUMsQ0FBQ0MsV0FBRixFQUF6QixDQUFQO0FBQ0Q7O2VBR2M7QUFDYkMsRUFBQUEsTUFBTSxFQUFFLENBQ05DLElBRE0sRUFFTkMsa0JBRk0sRUFHTkMsS0FITSxLQUlPO0FBQ2IsVUFBTUMsV0FBVyxHQUFHRixrQkFBa0IsR0FDbENBLGtCQURrQyxHQUVqQ0csUUFBRCxLQUFlO0FBQUMsT0FBQ0osSUFBRCxHQUFRSTtBQUFULEtBQWYsQ0FGSjtBQUdBLFVBQU1DLE1BQU0sR0FBR0gsS0FBZixDQUphLENBSVM7O0FBQ3RCLFFBQUlHLE1BQUosRUFBWTtBQUNWO0FBQ0EsYUFBUUMsU0FBRCxJQUF1QztBQUM1QyxjQUFNQyxPQUFPLEdBQUlDLEtBQUQsSUFBNkI7QUFDM0MsZ0JBQU1DLE9BQU8sR0FBRyx5QkFBV0osTUFBWCxDQUFoQjtBQUVBLDhCQUFPSyxLQUFLLENBQUNDLGFBQU4sQ0FBb0JMLFNBQXBCLEVBQStCLEVBQ3BDLEdBQUdFLEtBRGlDO0FBRXBDLGVBQUdMLFdBQVcsQ0FBQ00sT0FBRDtBQUZzQixXQUEvQixDQUFQO0FBSUQsU0FQRDs7QUFRQSxjQUFNRyxXQUFXLEdBQ2ZOLFNBQVMsQ0FBQ00sV0FBVixJQUF5Qk4sU0FBUyxDQUFDTixJQUFuQyxJQUEyQyxXQUQ3QztBQUVBTyxRQUFBQSxPQUFPLENBQUNLLFdBQVIsR0FBdUIsT0FBTWxCLFVBQVUsQ0FBQ00sSUFBRCxDQUFPLElBQUdZLFdBQVksR0FBN0Q7QUFDQSxlQUFPTCxPQUFQO0FBQ0QsT0FiRDtBQWNELEtBaEJELE1BZ0JPO0FBQ0w7QUFDQSxhQUFRRCxTQUFELElBQXVDO0FBQzVDLGNBQU1NLFdBQVcsR0FDZk4sU0FBUyxDQUFDTSxXQUFWLElBQXlCTixTQUFTLENBQUNOLElBQW5DLElBQTJDLFdBRDdDOztBQUdBLGNBQU1hLEdBQU4sU0FBa0JILEtBQUssQ0FBQ0osU0FBeEIsQ0FBcUM7QUFHbkNRLFVBQUFBLFdBQVcsQ0FBQ04sS0FBRCxFQUFXTyxHQUFYLEVBQW1CO0FBQzVCLGtCQUFNUCxLQUFOLEVBQWFPLEdBQWI7QUFDQSxpQkFBS1gsUUFBTCxHQUFnQlcsR0FBRyxDQUFDZixJQUFELENBQW5CO0FBQ0Q7O0FBQ0RnQixVQUFBQSxNQUFNLEdBQUc7QUFDUCxrQkFBTVIsS0FBSyxHQUFHLEVBQUMsR0FBRyxLQUFLQSxLQUFUO0FBQWdCLGlCQUFHTCxXQUFXLENBQUMsS0FBS0MsUUFBTjtBQUE5QixhQUFkO0FBQ0EsZ0NBQU9NLEtBQUssQ0FBQ0MsYUFBTixDQUFvQkwsU0FBcEIsRUFBK0JFLEtBQS9CLENBQVA7QUFDRDs7QUFWa0M7O0FBSk8sd0JBSXRDSyxHQUpzQyxpQkFnQnBCLE9BQU1uQixVQUFVLENBQUNNLElBQUQsQ0FBTyxJQUFHWSxXQUFZLEdBaEJsQjs7QUFBQSx3QkFJdENDLEdBSnNDLGtCQWlCcEI7QUFDcEIsV0FBQ2IsSUFBRCxHQUFRaUIsbUJBQVVDLEdBQVYsQ0FBY0M7QUFERixTQWpCb0I7O0FBcUI1QyxlQUFPTixHQUFQO0FBQ0QsT0F0QkQ7QUF1QkQ7QUFDRjtBQXBEWSxDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIENvcHlyaWdodCAoYykgMjAxOCBVYmVyIFRlY2hub2xvZ2llcywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93XG4gKi9cblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHt1c2VTZXJ2aWNlfSBmcm9tICcuL2NvbnRleHQuanMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB0eXBlIHtUb2tlbn0gZnJvbSAnZnVzaW9uLWNvcmUnO1xuXG5mdW5jdGlvbiBjYXBpdGFsaXplKHN0cjogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eLi8sIChjKSA9PiBjLnRvVXBwZXJDYXNlKCkpO1xufVxuXG50eXBlIFJlYWN0SE9DID0gKFJlYWN0LkNvbXBvbmVudFR5cGU8Kj4pID0+IFJlYWN0LkNvbXBvbmVudFR5cGU8Kj47XG5leHBvcnQgZGVmYXVsdCB7XG4gIGNyZWF0ZTogKFxuICAgIG5hbWU6IHN0cmluZyxcbiAgICBtYXBQcm92aWRlc1RvUHJvcHM/OiAoT2JqZWN0KSA9PiBPYmplY3QsXG4gICAgdG9rZW4/OiBUb2tlbjwqPlxuICApOiBSZWFjdEhPQyA9PiB7XG4gICAgY29uc3QgbWFwUHJvdmlkZXMgPSBtYXBQcm92aWRlc1RvUHJvcHNcbiAgICAgID8gbWFwUHJvdmlkZXNUb1Byb3BzXG4gICAgICA6IChwcm92aWRlcykgPT4gKHtbbmFtZV06IHByb3ZpZGVzfSk7XG4gICAgY29uc3QgX3Rva2VuID0gdG9rZW47IC8vIE1ha2UgdG9rZW4gY29uc3RhbnQgZm9yIGZsb3dcbiAgICBpZiAoX3Rva2VuKSB7XG4gICAgICAvLyBVc2UgbmV3IENvbnRleHQgdGhyb3VnaCB1c2VTZXJ2aWNlIGhvb2tcbiAgICAgIHJldHVybiAoQ29tcG9uZW50OiBSZWFjdC5Db21wb25lbnRUeXBlPCo+KSA9PiB7XG4gICAgICAgIGNvbnN0IFdyYXBwZXIgPSAocHJvcHM/OiB7W3N0cmluZ106IGFueX0pID0+IHtcbiAgICAgICAgICBjb25zdCBzZXJ2aWNlID0gdXNlU2VydmljZShfdG9rZW4pO1xuXG4gICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCB7XG4gICAgICAgICAgICAuLi5wcm9wcyxcbiAgICAgICAgICAgIC4uLm1hcFByb3ZpZGVzKHNlcnZpY2UpLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBkaXNwbGF5TmFtZSA9XG4gICAgICAgICAgQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lIHx8ICdBbm9ueW1vdXMnO1xuICAgICAgICBXcmFwcGVyLmRpc3BsYXlOYW1lID0gYFdpdGgke2NhcGl0YWxpemUobmFtZSl9KCR7ZGlzcGxheU5hbWV9KWA7XG4gICAgICAgIHJldHVybiBXcmFwcGVyO1xuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVXNlIGxlZ2FjeSBDb250ZXh0XG4gICAgICByZXR1cm4gKENvbXBvbmVudDogUmVhY3QuQ29tcG9uZW50VHlwZTwqPikgPT4ge1xuICAgICAgICBjb25zdCBkaXNwbGF5TmFtZSA9XG4gICAgICAgICAgQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lIHx8ICdBbm9ueW1vdXMnO1xuXG4gICAgICAgIGNsYXNzIEhPQyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDwqPiB7XG4gICAgICAgICAgcHJvdmlkZXM6IGFueTtcblxuICAgICAgICAgIGNvbnN0cnVjdG9yKHByb3BzOiAqLCBjdHg6ICopIHtcbiAgICAgICAgICAgIHN1cGVyKHByb3BzLCBjdHgpO1xuICAgICAgICAgICAgdGhpcy5wcm92aWRlcyA9IGN0eFtuYW1lXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVuZGVyKCkge1xuICAgICAgICAgICAgY29uc3QgcHJvcHMgPSB7Li4udGhpcy5wcm9wcywgLi4ubWFwUHJvdmlkZXModGhpcy5wcm92aWRlcyl9O1xuICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBwcm9wcyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc3RhdGljIGRpc3BsYXlOYW1lID0gYFdpdGgke2NhcGl0YWxpemUobmFtZSl9KCR7ZGlzcGxheU5hbWV9KWA7XG4gICAgICAgICAgc3RhdGljIGNvbnRleHRUeXBlcyA9IHtcbiAgICAgICAgICAgIFtuYW1lXTogUHJvcFR5cGVzLmFueS5pc1JlcXVpcmVkLFxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIEhPQztcbiAgICAgIH07XG4gICAgfVxuICB9LFxufTtcbiJdfQ==