"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  SkipPrepareToken: true,
  ProviderPlugin: true,
  ProvidedHOC: true,
  Provider: true,
  FusionContext: true,
  ServiceConsumer: true,
  ServiceContext: true,
  useService: true,
  withServices: true
};
Object.defineProperty(exports, "ProviderPlugin", {
  enumerable: true,
  get: function () {
    return _plugin.default;
  }
});
Object.defineProperty(exports, "ProvidedHOC", {
  enumerable: true,
  get: function () {
    return _hoc.default;
  }
});
Object.defineProperty(exports, "Provider", {
  enumerable: true,
  get: function () {
    return _provider.default;
  }
});
Object.defineProperty(exports, "FusionContext", {
  enumerable: true,
  get: function () {
    return _context.FusionContext;
  }
});
Object.defineProperty(exports, "ServiceConsumer", {
  enumerable: true,
  get: function () {
    return _context.ServiceConsumer;
  }
});
Object.defineProperty(exports, "ServiceContext", {
  enumerable: true,
  get: function () {
    return _context.ServiceContext;
  }
});
Object.defineProperty(exports, "useService", {
  enumerable: true,
  get: function () {
    return _context.useService;
  }
});
Object.defineProperty(exports, "withServices", {
  enumerable: true,
  get: function () {
    return _context.withServices;
  }
});
exports.default = exports.SkipPrepareToken = void 0;

var React = _interopRequireWildcard(require("react"));

var _fusionCore = _interopRequireWildcard(require("fusion-core"));

var _index = require("./async/index.js");

Object.keys(_index).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _index[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index[key];
    }
  });
});

var _prepareProvider = _interopRequireDefault(require("./async/prepare-provider"));

var _fusionTokens = require("fusion-tokens");

var _server = _interopRequireDefault(require("./server"));

var _plugin = _interopRequireDefault(require("./plugin"));

var _hoc = _interopRequireDefault(require("./hoc"));

var _provider = _interopRequireDefault(require("./provider"));

var _context = require("./context.js");

var _jsxRuntime = require("react/jsx-runtime");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

/* eslint-env browser */
const SkipPrepareToken = (0, _fusionCore.createToken)('SkipPrepareToken');
exports.SkipPrepareToken = SkipPrepareToken;

class App extends _fusionCore.default {
  constructor(root, render) {
    if (! /*#__PURE__*/React.isValidElement(root)) {
      throw new Error('Invalid React element. Ensure your root element is a React.Element (e.g. <Foo />) and not a React.Component (e.g. Foo)');
    }

    const getService = token => {
      // $FlowFixMe
      const provides = this.getService(token);
      const isRequiredToken = Boolean(token.optional);

      if (typeof provides === 'undefined' && isRequiredToken) {
        throw new Error(`Token ${token.name} not registered or registered plugin does not provide a service. To use an optional plugin, use \`Token.optional\`.`);
      }

      return provides;
    };

    const renderer = (0, _fusionCore.createPlugin)({
      deps: {
        criticalChunkIds: _fusionCore.CriticalChunkIdsToken.optional,
        skipPrepare: SkipPrepareToken.optional,
        logger: _fusionTokens.LoggerToken.optional
      },

      provides({
        skipPrepare,
        logger
      }) {
        return (el, ctx) => {
          return (skipPrepare ? Promise.resolve() : (0, _index.prepare)(el, ctx)).catch(() => {}) // recover from failed `prepare`
          .then(() => {
            if (render) {
              return render(el, ctx);
            }

            if (true) {
              return (0, _server.default)(el, logger);
            } else {
              return clientRender(el);
            }
          });
        };
      },

      middleware({
        criticalChunkIds
      }) {
        return (ctx, next) => {
          if (true && !ctx.element) {
            return next();
          }

          const markAsCritical = true ? chunkId => {
            // Push to legacy context for backwards compat w/ legacy SSR template
            ctx.preloadChunks.push(chunkId); // Also use new service if registered

            if (criticalChunkIds) {
              let chunkIds = criticalChunkIds.from(ctx);
              chunkIds.add(chunkId);
            }
          } : noop; // This is used to collect arbitrary metadata during a given SSR
          // The primary use case is to collect bundler-specific information
          // about import() statements encountered during SSR so that async
          // bundle-split client code can be preloaded/fetched appropriately

          ctx.ssrMetadata = [];
          const pushSSRMetadata = true ? metadata => {
            ctx.ssrMetadata.push(metadata);
          } : noop;
          ctx.element = /*#__PURE__*/(0, _jsxRuntime.jsx)(_prepareProvider.default, {
            markAsCritical: markAsCritical,
            pushSSRMetadata: pushSSRMetadata,
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_context.FusionContext.Provider, {
              value: ctx,
              children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_context.ServiceContext.Provider, {
                value: getService,
                children: ctx.element
              })
            })
          });
          return next();
        };
      }

    });
    super(root, renderer);
  }

}

exports.default = App;

function noop() {}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,