function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
import * as React from 'react';
import { useService } from './context.js';
import PropTypes from 'prop-types';

function capitalize(str) {
  return str.replace(/^./, c => c.toUpperCase());
}

export default {
  create: (name, mapProvidesToProps, token) => {
    const mapProvides = mapProvidesToProps ? mapProvidesToProps : provides => ({
      [name]: provides
    });
    const _token = token; // Make token constant for flow

    if (_token) {
      // Use new Context through useService hook
      return Component => {
        const Wrapper = props => {
          const service = useService(_token);
          return /*#__PURE__*/React.createElement(Component, { ...props,
            ...mapProvides(service)
          });
        };

        const displayName = Component.displayName || Component.name || 'Anonymous';
        Wrapper.displayName = `With${capitalize(name)}(${displayName})`;
        return Wrapper;
      };
    } else {
      // Use legacy Context
      return Component => {
        const displayName = Component.displayName || Component.name || 'Anonymous';

        class HOC extends React.Component {
          constructor(props, ctx) {
            super(props, ctx);
            this.provides = ctx[name];
          }

          render() {
            const props = { ...this.props,
              ...mapProvides(this.provides)
            };
            return /*#__PURE__*/React.createElement(Component, props);
          }

        }

        _defineProperty(HOC, "displayName", `With${capitalize(name)}(${displayName})`);

        _defineProperty(HOC, "contextTypes", {
          [name]: PropTypes.any.isRequired
        });

        return HOC;
      };
    }
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9ob2MuanMiXSwibmFtZXMiOlsiUmVhY3QiLCJ1c2VTZXJ2aWNlIiwiUHJvcFR5cGVzIiwiY2FwaXRhbGl6ZSIsInN0ciIsInJlcGxhY2UiLCJjIiwidG9VcHBlckNhc2UiLCJjcmVhdGUiLCJuYW1lIiwibWFwUHJvdmlkZXNUb1Byb3BzIiwidG9rZW4iLCJtYXBQcm92aWRlcyIsInByb3ZpZGVzIiwiX3Rva2VuIiwiQ29tcG9uZW50IiwiV3JhcHBlciIsInByb3BzIiwic2VydmljZSIsImNyZWF0ZUVsZW1lbnQiLCJkaXNwbGF5TmFtZSIsIkhPQyIsImNvbnN0cnVjdG9yIiwiY3R4IiwicmVuZGVyIiwiYW55IiwiaXNSZXF1aXJlZCJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBLE9BQU8sS0FBS0EsS0FBWixNQUF1QixPQUF2QjtBQUNBLFNBQVFDLFVBQVIsUUFBeUIsY0FBekI7QUFDQSxPQUFPQyxTQUFQLE1BQXNCLFlBQXRCOztBQUdBLFNBQVNDLFVBQVQsQ0FBb0JDLEdBQXBCLEVBQXlDO0FBQ3ZDLFNBQU9BLEdBQUcsQ0FBQ0MsT0FBSixDQUFZLElBQVosRUFBbUJDLENBQUQsSUFBT0EsQ0FBQyxDQUFDQyxXQUFGLEVBQXpCLENBQVA7QUFDRDs7QUFHRCxlQUFlO0FBQ2JDLEVBQUFBLE1BQU0sRUFBRSxDQUNOQyxJQURNLEVBRU5DLGtCQUZNLEVBR05DLEtBSE0sS0FJTztBQUNiLFVBQU1DLFdBQVcsR0FBR0Ysa0JBQWtCLEdBQ2xDQSxrQkFEa0MsR0FFakNHLFFBQUQsS0FBZTtBQUFDLE9BQUNKLElBQUQsR0FBUUk7QUFBVCxLQUFmLENBRko7QUFHQSxVQUFNQyxNQUFNLEdBQUdILEtBQWYsQ0FKYSxDQUlTOztBQUN0QixRQUFJRyxNQUFKLEVBQVk7QUFDVjtBQUNBLGFBQVFDLFNBQUQsSUFBdUM7QUFDNUMsY0FBTUMsT0FBTyxHQUFJQyxLQUFELElBQTZCO0FBQzNDLGdCQUFNQyxPQUFPLEdBQUdqQixVQUFVLENBQUNhLE1BQUQsQ0FBMUI7QUFFQSw4QkFBT2QsS0FBSyxDQUFDbUIsYUFBTixDQUFvQkosU0FBcEIsRUFBK0IsRUFDcEMsR0FBR0UsS0FEaUM7QUFFcEMsZUFBR0wsV0FBVyxDQUFDTSxPQUFEO0FBRnNCLFdBQS9CLENBQVA7QUFJRCxTQVBEOztBQVFBLGNBQU1FLFdBQVcsR0FDZkwsU0FBUyxDQUFDSyxXQUFWLElBQXlCTCxTQUFTLENBQUNOLElBQW5DLElBQTJDLFdBRDdDO0FBRUFPLFFBQUFBLE9BQU8sQ0FBQ0ksV0FBUixHQUF1QixPQUFNakIsVUFBVSxDQUFDTSxJQUFELENBQU8sSUFBR1csV0FBWSxHQUE3RDtBQUNBLGVBQU9KLE9BQVA7QUFDRCxPQWJEO0FBY0QsS0FoQkQsTUFnQk87QUFDTDtBQUNBLGFBQVFELFNBQUQsSUFBdUM7QUFDNUMsY0FBTUssV0FBVyxHQUNmTCxTQUFTLENBQUNLLFdBQVYsSUFBeUJMLFNBQVMsQ0FBQ04sSUFBbkMsSUFBMkMsV0FEN0M7O0FBR0EsY0FBTVksR0FBTixTQUFrQnJCLEtBQUssQ0FBQ2UsU0FBeEIsQ0FBcUM7QUFHbkNPLFVBQUFBLFdBQVcsQ0FBQ0wsS0FBRCxFQUFXTSxHQUFYLEVBQW1CO0FBQzVCLGtCQUFNTixLQUFOLEVBQWFNLEdBQWI7QUFDQSxpQkFBS1YsUUFBTCxHQUFnQlUsR0FBRyxDQUFDZCxJQUFELENBQW5CO0FBQ0Q7O0FBQ0RlLFVBQUFBLE1BQU0sR0FBRztBQUNQLGtCQUFNUCxLQUFLLEdBQUcsRUFBQyxHQUFHLEtBQUtBLEtBQVQ7QUFBZ0IsaUJBQUdMLFdBQVcsQ0FBQyxLQUFLQyxRQUFOO0FBQTlCLGFBQWQ7QUFDQSxnQ0FBT2IsS0FBSyxDQUFDbUIsYUFBTixDQUFvQkosU0FBcEIsRUFBK0JFLEtBQS9CLENBQVA7QUFDRDs7QUFWa0M7O0FBSk8sd0JBSXRDSSxHQUpzQyxpQkFnQnBCLE9BQU1sQixVQUFVLENBQUNNLElBQUQsQ0FBTyxJQUFHVyxXQUFZLEdBaEJsQjs7QUFBQSx3QkFJdENDLEdBSnNDLGtCQWlCcEI7QUFDcEIsV0FBQ1osSUFBRCxHQUFRUCxTQUFTLENBQUN1QixHQUFWLENBQWNDO0FBREYsU0FqQm9COztBQXFCNUMsZUFBT0wsR0FBUDtBQUNELE9BdEJEO0FBdUJEO0FBQ0Y7QUFwRFksQ0FBZiIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBDb3B5cmlnaHQgKGMpIDIwMTggVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICovXG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7dXNlU2VydmljZX0gZnJvbSAnLi9jb250ZXh0LmpzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgdHlwZSB7VG9rZW59IGZyb20gJ2Z1c2lvbi1jb3JlJztcblxuZnVuY3Rpb24gY2FwaXRhbGl6ZShzdHI6IHN0cmluZyk6IHN0cmluZyB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvXi4vLCAoYykgPT4gYy50b1VwcGVyQ2FzZSgpKTtcbn1cblxudHlwZSBSZWFjdEhPQyA9IChSZWFjdC5Db21wb25lbnRUeXBlPCo+KSA9PiBSZWFjdC5Db21wb25lbnRUeXBlPCo+O1xuZXhwb3J0IGRlZmF1bHQge1xuICBjcmVhdGU6IChcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgbWFwUHJvdmlkZXNUb1Byb3BzPzogKE9iamVjdCkgPT4gT2JqZWN0LFxuICAgIHRva2VuPzogVG9rZW48Kj5cbiAgKTogUmVhY3RIT0MgPT4ge1xuICAgIGNvbnN0IG1hcFByb3ZpZGVzID0gbWFwUHJvdmlkZXNUb1Byb3BzXG4gICAgICA/IG1hcFByb3ZpZGVzVG9Qcm9wc1xuICAgICAgOiAocHJvdmlkZXMpID0+ICh7W25hbWVdOiBwcm92aWRlc30pO1xuICAgIGNvbnN0IF90b2tlbiA9IHRva2VuOyAvLyBNYWtlIHRva2VuIGNvbnN0YW50IGZvciBmbG93XG4gICAgaWYgKF90b2tlbikge1xuICAgICAgLy8gVXNlIG5ldyBDb250ZXh0IHRocm91Z2ggdXNlU2VydmljZSBob29rXG4gICAgICByZXR1cm4gKENvbXBvbmVudDogUmVhY3QuQ29tcG9uZW50VHlwZTwqPikgPT4ge1xuICAgICAgICBjb25zdCBXcmFwcGVyID0gKHByb3BzPzoge1tzdHJpbmddOiBhbnl9KSA9PiB7XG4gICAgICAgICAgY29uc3Qgc2VydmljZSA9IHVzZVNlcnZpY2UoX3Rva2VuKTtcblxuICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwge1xuICAgICAgICAgICAgLi4ucHJvcHMsXG4gICAgICAgICAgICAuLi5tYXBQcm92aWRlcyhzZXJ2aWNlKSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgZGlzcGxheU5hbWUgPVxuICAgICAgICAgIENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZSB8fCAnQW5vbnltb3VzJztcbiAgICAgICAgV3JhcHBlci5kaXNwbGF5TmFtZSA9IGBXaXRoJHtjYXBpdGFsaXplKG5hbWUpfSgke2Rpc3BsYXlOYW1lfSlgO1xuICAgICAgICByZXR1cm4gV3JhcHBlcjtcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFVzZSBsZWdhY3kgQ29udGV4dFxuICAgICAgcmV0dXJuIChDb21wb25lbnQ6IFJlYWN0LkNvbXBvbmVudFR5cGU8Kj4pID0+IHtcbiAgICAgICAgY29uc3QgZGlzcGxheU5hbWUgPVxuICAgICAgICAgIENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZSB8fCAnQW5vbnltb3VzJztcblxuICAgICAgICBjbGFzcyBIT0MgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8Kj4ge1xuICAgICAgICAgIHByb3ZpZGVzOiBhbnk7XG5cbiAgICAgICAgICBjb25zdHJ1Y3Rvcihwcm9wczogKiwgY3R4OiAqKSB7XG4gICAgICAgICAgICBzdXBlcihwcm9wcywgY3R4KTtcbiAgICAgICAgICAgIHRoaXMucHJvdmlkZXMgPSBjdHhbbmFtZV07XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlbmRlcigpIHtcbiAgICAgICAgICAgIGNvbnN0IHByb3BzID0gey4uLnRoaXMucHJvcHMsIC4uLm1hcFByb3ZpZGVzKHRoaXMucHJvdmlkZXMpfTtcbiAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgcHJvcHMpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHN0YXRpYyBkaXNwbGF5TmFtZSA9IGBXaXRoJHtjYXBpdGFsaXplKG5hbWUpfSgke2Rpc3BsYXlOYW1lfSlgO1xuICAgICAgICAgIHN0YXRpYyBjb250ZXh0VHlwZXMgPSB7XG4gICAgICAgICAgICBbbmFtZV06IFByb3BUeXBlcy5hbnkuaXNSZXF1aXJlZCxcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBIT0M7XG4gICAgICB9O1xuICAgIH1cbiAgfSxcbn07XG4iXX0=