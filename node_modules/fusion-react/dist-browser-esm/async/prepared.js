function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
import * as React from 'react';
import PropTypes from 'prop-types';
import { jsx as _jsx } from "react/jsx-runtime";

const prepared = (sideEffect, opts = {}) => OriginalComponent => {
  opts = Object.assign({
    boundary: false,
    defer: false,
    componentDidMount: true,
    componentWillReceiveProps: false,
    componentDidUpdate: false,
    contextTypes: {},
    forceUpdate: false
  }, opts);
  const displayName = OriginalComponent.displayName || OriginalComponent.name || '';

  class PreparedComponent extends React.Component {
    componentDidMount() {
      if (opts.componentDidMount) {
        Promise.resolve(sideEffect(this.props, this.context)).then(() => {
          if (opts.forceUpdate) {
            this.forceUpdate();
          }
        });
      }
    }

    UNSAFE_componentWillReceiveProps(nextProps, nextContext) {
      if (opts.componentWillReceiveProps) {
        sideEffect(nextProps, nextContext);
      }
    }

    componentDidUpdate() {
      if (opts.componentDidUpdate) {
        sideEffect(this.props, this.context);
      }
    }

    render() {
      const effectId = this.props.effectId || 'defaultId';
      const prepareState = this.context.__PREPARE_STATE__;

      if (prepareState) {
        if (opts.defer || opts.boundary) {
          // skip prepare if defer or boundary
          return null;
        }

        const isResolved = prepareState.isResolved(PreparedComponent, effectId, () => sideEffect(this.props, this.context));

        if (!isResolved) {
          // Wait until resolved
          return null;
        }
      }

      return /*#__PURE__*/_jsx(OriginalComponent, { ...this.props
      });
    }

  }

  _defineProperty(PreparedComponent, "contextTypes", {
    __PREPARE_STATE__: PropTypes.any,
    ...opts.contextTypes
  });

  _defineProperty(PreparedComponent, "displayName", `PreparedComponent(${displayName})`);

  return PreparedComponent;
};

export default prepared;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hc3luYy9wcmVwYXJlZC5qcyJdLCJuYW1lcyI6WyJSZWFjdCIsIlByb3BUeXBlcyIsInByZXBhcmVkIiwic2lkZUVmZmVjdCIsIm9wdHMiLCJPcmlnaW5hbENvbXBvbmVudCIsIk9iamVjdCIsImFzc2lnbiIsImJvdW5kYXJ5IiwiZGVmZXIiLCJjb21wb25lbnREaWRNb3VudCIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJjb21wb25lbnREaWRVcGRhdGUiLCJjb250ZXh0VHlwZXMiLCJmb3JjZVVwZGF0ZSIsImRpc3BsYXlOYW1lIiwibmFtZSIsIlByZXBhcmVkQ29tcG9uZW50IiwiQ29tcG9uZW50IiwiUHJvbWlzZSIsInJlc29sdmUiLCJwcm9wcyIsImNvbnRleHQiLCJ0aGVuIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJuZXh0UHJvcHMiLCJuZXh0Q29udGV4dCIsInJlbmRlciIsImVmZmVjdElkIiwicHJlcGFyZVN0YXRlIiwiX19QUkVQQVJFX1NUQVRFX18iLCJpc1Jlc29sdmVkIiwiYW55Il0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUEsT0FBTyxLQUFLQSxLQUFaLE1BQXVCLE9BQXZCO0FBQ0EsT0FBT0MsU0FBUCxNQUFzQixZQUF0Qjs7O0FBWUEsTUFBTUMsUUFBUSxHQUNaLENBQUNDLFVBQUQsRUFBK0NDLElBQW1CLEdBQUcsRUFBckUsS0FFRUMsaUJBREYsSUFFMEQ7QUFDeERELEVBQUFBLElBQUksR0FBR0UsTUFBTSxDQUFDQyxNQUFQLENBQ0w7QUFDRUMsSUFBQUEsUUFBUSxFQUFFLEtBRFo7QUFFRUMsSUFBQUEsS0FBSyxFQUFFLEtBRlQ7QUFHRUMsSUFBQUEsaUJBQWlCLEVBQUUsSUFIckI7QUFJRUMsSUFBQUEseUJBQXlCLEVBQUUsS0FKN0I7QUFLRUMsSUFBQUEsa0JBQWtCLEVBQUUsS0FMdEI7QUFNRUMsSUFBQUEsWUFBWSxFQUFFLEVBTmhCO0FBT0VDLElBQUFBLFdBQVcsRUFBRTtBQVBmLEdBREssRUFVTFYsSUFWSyxDQUFQO0FBYUEsUUFBTVcsV0FBVyxHQUNmVixpQkFBaUIsQ0FBQ1UsV0FBbEIsSUFBaUNWLGlCQUFpQixDQUFDVyxJQUFuRCxJQUEyRCxFQUQ3RDs7QUFHQSxRQUFNQyxpQkFBTixTQUFnQ2pCLEtBQUssQ0FBQ2tCLFNBQXRDLENBQXFEO0FBQ25EUixJQUFBQSxpQkFBaUIsR0FBRztBQUNsQixVQUFJTixJQUFJLENBQUNNLGlCQUFULEVBQTRCO0FBQzFCUyxRQUFBQSxPQUFPLENBQUNDLE9BQVIsQ0FBZ0JqQixVQUFVLENBQUMsS0FBS2tCLEtBQU4sRUFBYSxLQUFLQyxPQUFsQixDQUExQixFQUFzREMsSUFBdEQsQ0FBMkQsTUFBTTtBQUMvRCxjQUFJbkIsSUFBSSxDQUFDVSxXQUFULEVBQXNCO0FBQ3BCLGlCQUFLQSxXQUFMO0FBQ0Q7QUFDRixTQUpEO0FBS0Q7QUFDRjs7QUFFRFUsSUFBQUEsZ0NBQWdDLENBQUNDLFNBQUQsRUFBWUMsV0FBWixFQUF5QjtBQUN2RCxVQUFJdEIsSUFBSSxDQUFDTyx5QkFBVCxFQUFvQztBQUNsQ1IsUUFBQUEsVUFBVSxDQUFDc0IsU0FBRCxFQUFZQyxXQUFaLENBQVY7QUFDRDtBQUNGOztBQUVEZCxJQUFBQSxrQkFBa0IsR0FBRztBQUNuQixVQUFJUixJQUFJLENBQUNRLGtCQUFULEVBQTZCO0FBQzNCVCxRQUFBQSxVQUFVLENBQUMsS0FBS2tCLEtBQU4sRUFBYSxLQUFLQyxPQUFsQixDQUFWO0FBQ0Q7QUFDRjs7QUFFREssSUFBQUEsTUFBTSxHQUFHO0FBQ1AsWUFBTUMsUUFBUSxHQUFHLEtBQUtQLEtBQUwsQ0FBV08sUUFBWCxJQUF1QixXQUF4QztBQUNBLFlBQU1DLFlBQVksR0FBRyxLQUFLUCxPQUFMLENBQWFRLGlCQUFsQzs7QUFDQSxVQUFJRCxZQUFKLEVBQWtCO0FBQ2hCLFlBQUl6QixJQUFJLENBQUNLLEtBQUwsSUFBY0wsSUFBSSxDQUFDSSxRQUF2QixFQUFpQztBQUMvQjtBQUNBLGlCQUFPLElBQVA7QUFDRDs7QUFFRCxjQUFNdUIsVUFBVSxHQUFHRixZQUFZLENBQUNFLFVBQWIsQ0FDakJkLGlCQURpQixFQUVqQlcsUUFGaUIsRUFHakIsTUFBTXpCLFVBQVUsQ0FBQyxLQUFLa0IsS0FBTixFQUFhLEtBQUtDLE9BQWxCLENBSEMsQ0FBbkI7O0FBTUEsWUFBSSxDQUFDUyxVQUFMLEVBQWlCO0FBQ2Y7QUFDQSxpQkFBTyxJQUFQO0FBQ0Q7QUFDRjs7QUFFRCwwQkFBTyxLQUFDLGlCQUFELE9BQXVCLEtBQUtWO0FBQTVCLFFBQVA7QUFDRDs7QUE3Q2tEOztBQWpCRyxrQkFpQmxESixpQkFqQmtELGtCQWdFaEM7QUFDcEJhLElBQUFBLGlCQUFpQixFQUFFN0IsU0FBUyxDQUFDK0IsR0FEVDtBQUVwQixPQUFHNUIsSUFBSSxDQUFDUztBQUZZLEdBaEVnQzs7QUFBQSxrQkFpQmxESSxpQkFqQmtELGlCQW9FaEMscUJBQW9CRixXQUFZLEdBcEVBOztBQXVFeEQsU0FBT0UsaUJBQVA7QUFDRCxDQTVFSDs7QUE4RUEsZUFBZWYsUUFBZiIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBDb3B5cmlnaHQgKGMpIDIwMTggVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICovXG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbnR5cGUgUHJlcGFyZWRPcHRzID0ge1xuICBib3VuZGFyeT86IGJvb2xlYW4sXG4gIGRlZmVyPzogYm9vbGVhbixcbiAgY29tcG9uZW50RGlkTW91bnQ/OiBib29sZWFuLFxuICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzPzogYm9vbGVhbixcbiAgY29tcG9uZW50RGlkVXBkYXRlPzogYm9vbGVhbixcbiAgY29udGV4dFR5cGVzPzogT2JqZWN0LFxuICBmb3JjZVVwZGF0ZT86IGJvb2xlYW4sXG59O1xuXG5jb25zdCBwcmVwYXJlZCA9XG4gIChzaWRlRWZmZWN0OiAoYW55LCBhbnkpID0+IGFueSB8IFByb21pc2U8YW55Piwgb3B0cz86IFByZXBhcmVkT3B0cyA9IHt9KSA9PlxuICA8Q29uZmlnPihcbiAgICBPcmlnaW5hbENvbXBvbmVudDogUmVhY3QuQ29tcG9uZW50VHlwZTxDb25maWc+XG4gICk6IFJlYWN0LkNvbXBvbmVudFR5cGU8ey4uLkNvbmZpZywgZWZmZWN0SWQ/OiBzdHJpbmd9PiA9PiB7XG4gICAgb3B0cyA9IE9iamVjdC5hc3NpZ24oXG4gICAgICB7XG4gICAgICAgIGJvdW5kYXJ5OiBmYWxzZSxcbiAgICAgICAgZGVmZXI6IGZhbHNlLFxuICAgICAgICBjb21wb25lbnREaWRNb3VudDogdHJ1ZSxcbiAgICAgICAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wczogZmFsc2UsXG4gICAgICAgIGNvbXBvbmVudERpZFVwZGF0ZTogZmFsc2UsXG4gICAgICAgIGNvbnRleHRUeXBlczoge30sXG4gICAgICAgIGZvcmNlVXBkYXRlOiBmYWxzZSxcbiAgICAgIH0sXG4gICAgICBvcHRzXG4gICAgKTtcblxuICAgIGNvbnN0IGRpc3BsYXlOYW1lID1cbiAgICAgIE9yaWdpbmFsQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IE9yaWdpbmFsQ29tcG9uZW50Lm5hbWUgfHwgJyc7XG5cbiAgICBjbGFzcyBQcmVwYXJlZENvbXBvbmVudCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxhbnk+IHtcbiAgICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICBpZiAob3B0cy5jb21wb25lbnREaWRNb3VudCkge1xuICAgICAgICAgIFByb21pc2UucmVzb2x2ZShzaWRlRWZmZWN0KHRoaXMucHJvcHMsIHRoaXMuY29udGV4dCkpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgaWYgKG9wdHMuZm9yY2VVcGRhdGUpIHtcbiAgICAgICAgICAgICAgdGhpcy5mb3JjZVVwZGF0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIFVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcywgbmV4dENvbnRleHQpIHtcbiAgICAgICAgaWYgKG9wdHMuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcykge1xuICAgICAgICAgIHNpZGVFZmZlY3QobmV4dFByb3BzLCBuZXh0Q29udGV4dCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgICAgICBpZiAob3B0cy5jb21wb25lbnREaWRVcGRhdGUpIHtcbiAgICAgICAgICBzaWRlRWZmZWN0KHRoaXMucHJvcHMsIHRoaXMuY29udGV4dCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCBlZmZlY3RJZCA9IHRoaXMucHJvcHMuZWZmZWN0SWQgfHwgJ2RlZmF1bHRJZCc7XG4gICAgICAgIGNvbnN0IHByZXBhcmVTdGF0ZSA9IHRoaXMuY29udGV4dC5fX1BSRVBBUkVfU1RBVEVfXztcbiAgICAgICAgaWYgKHByZXBhcmVTdGF0ZSkge1xuICAgICAgICAgIGlmIChvcHRzLmRlZmVyIHx8IG9wdHMuYm91bmRhcnkpIHtcbiAgICAgICAgICAgIC8vIHNraXAgcHJlcGFyZSBpZiBkZWZlciBvciBib3VuZGFyeVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3QgaXNSZXNvbHZlZCA9IHByZXBhcmVTdGF0ZS5pc1Jlc29sdmVkKFxuICAgICAgICAgICAgUHJlcGFyZWRDb21wb25lbnQsXG4gICAgICAgICAgICBlZmZlY3RJZCxcbiAgICAgICAgICAgICgpID0+IHNpZGVFZmZlY3QodGhpcy5wcm9wcywgdGhpcy5jb250ZXh0KVxuICAgICAgICAgICk7XG5cbiAgICAgICAgICBpZiAoIWlzUmVzb2x2ZWQpIHtcbiAgICAgICAgICAgIC8vIFdhaXQgdW50aWwgcmVzb2x2ZWRcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiA8T3JpZ2luYWxDb21wb25lbnQgey4uLnRoaXMucHJvcHN9IC8+O1xuICAgICAgfVxuXG4gICAgICBzdGF0aWMgY29udGV4dFR5cGVzID0ge1xuICAgICAgICBfX1BSRVBBUkVfU1RBVEVfXzogUHJvcFR5cGVzLmFueSxcbiAgICAgICAgLi4ub3B0cy5jb250ZXh0VHlwZXMsXG4gICAgICB9O1xuICAgICAgc3RhdGljIGRpc3BsYXlOYW1lID0gYFByZXBhcmVkQ29tcG9uZW50KCR7ZGlzcGxheU5hbWV9KWA7XG4gICAgfVxuXG4gICAgcmV0dXJuIFByZXBhcmVkQ29tcG9uZW50O1xuICB9O1xuXG5leHBvcnQgZGVmYXVsdCBwcmVwYXJlZDtcbiJdfQ==