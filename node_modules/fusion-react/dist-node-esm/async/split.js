/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
import * as React from 'react';
import PropTypes from 'prop-types';
import prepared from './prepared.js';
import { jsx as _jsx } from "react/jsx-runtime";
const contextTypes = {
  splitComponentLoaders: PropTypes.array.isRequired
};

if (true) {
  // $FlowFixMe
  contextTypes.markAsCritical = PropTypes.func; // $FlowFixMe

  contextTypes.pushSSRMetadata = PropTypes.func;
}

let cachedLoadedChunkIds;
let lastWebpackChunksLength;

function getLoadedChunkIds() {
  const webpackChunks = false ? window.webpackChunkFusion : [];

  if (cachedLoadedChunkIds && lastWebpackChunksLength === webpackChunks.length) {
    return cachedLoadedChunkIds;
  }

  cachedLoadedChunkIds = new Set(webpackChunks.flatMap(chunkTuple => chunkTuple[0]));
  lastWebpackChunksLength = webpackChunks.length;
  return cachedLoadedChunkIds;
}

function webpackChunksLoaded(chunkIds) {
  const loadedChunkIds = getLoadedChunkIds();
  return chunkIds.every(chunkId => loadedChunkIds.has(chunkId));
}

export default function withAsyncComponent({
  defer,
  load,
  LoadingComponent,
  ErrorComponent
}) {
  let AsyncComponent = null;
  let error = null; // This stores promise instrumentation used by webpack

  const metadata = {
    chunkIds: [],
    i18nKeys: []
  };
  let dynamicImportMetadata; // Stores promise instrumentation used by esbuild

  function WithAsyncComponent(props) {
    if (false) {
      // We need to check if the module is already loaded, as it could be marked as
      // critical during SSR. This is crucial in case the prepare ran during SSR,
      // but skipped on the client. In which case the AsyncComponent will never get
      // populated before app is hydrated, causing a rendering mismatch.
      if (!AsyncComponent) {
        let promise = load(); // $FlowFixMe

        const id = promise.__MODULE_ID; // $FlowFixMe

        const chunkIds = promise.__CHUNK_IDS;

        if (typeof __webpack_modules__ !== 'undefined' && __webpack_modules__[id] && webpackChunksLoaded(chunkIds)) {
          // If module is already loaded, it can be synchronously imported
          AsyncComponent = __webpack_require__(id).default;
        }
      }
    }

    if (error) {
      return /*#__PURE__*/_jsx(ErrorComponent, {
        error: error
      });
    }

    if (!AsyncComponent) {
      return /*#__PURE__*/_jsx(LoadingComponent, {});
    }

    return /*#__PURE__*/_jsx(AsyncComponent, { ...props
    });
  }

  return prepared((props, context) => {
    if (AsyncComponent) {
      if (true && context.markAsCritical) {
        metadata.chunkIds.forEach(chunkId => {
          context.markAsCritical(chunkId);
        });
      }

      if (true && context.pushSSRMetadata && dynamicImportMetadata) {
        context.pushSSRMetadata({
          type: 'critical-dynamic-import',
          data: dynamicImportMetadata
        });
      }

      if (process.env.NODE_ENV !== "production") {
        // In case promise instrumentation has changed, call
        // splitComponentLoaders again
        let componentPromise;

        try {
          componentPromise = load();
        } catch (e) {
          componentPromise = Promise.reject(e);
        } // $FlowFixMe


        metadata.chunkIds = componentPromise.__CHUNK_IDS || []; // $FlowFixMe

        metadata.i18nKeys = componentPromise.__I18N_KEYS || [];
        dynamicImportMetadata = // $FlowFixMe
        componentPromise.__FUSION_DYNAMIC_IMPORT_METADATA__;
        return Promise.all(context.splitComponentLoaders.map(loader => loader(metadata.chunkIds, metadata))).then(() => AsyncComponent);
      } else {
        return Promise.resolve(AsyncComponent);
      }
    }

    let componentPromise;

    try {
      componentPromise = load();
    } catch (e) {
      componentPromise = Promise.reject(e);
    } // $FlowFixMe


    metadata.chunkIds = componentPromise.__CHUNK_IDS || []; // $FlowFixMe

    metadata.i18nKeys = componentPromise.__I18N_KEYS || [];
    dynamicImportMetadata = // $FlowFixMe
    componentPromise.__FUSION_DYNAMIC_IMPORT_METADATA__;

    if (true && context.markAsCritical) {
      // $FlowFixMe
      metadata.chunkIds.forEach(chunkId => {
        context.markAsCritical(chunkId);
      });
    }

    if (true && context.pushSSRMetadata && dynamicImportMetadata) {
      context.pushSSRMetadata({
        type: 'critical-dynamic-import',
        data: dynamicImportMetadata
      });
    }

    const loadPromises = [componentPromise, ...context.splitComponentLoaders.map(loader => loader(metadata.chunkIds, metadata))];
    return Promise.all(loadPromises).then(([asyncComponent]) => {
      // Note: .default is toolchain specific, breaks w/ CommonJS exports
      AsyncComponent = asyncComponent.default;

      if (AsyncComponent === undefined) {
        throw new Error('Bundle does not contain a default export');
      }
    }).catch(err => {
      error = err;
      if (false) setTimeout(() => {
        throw err;
      }); // log error
    });
  }, {
    defer,
    contextTypes,
    forceUpdate: true
  })(WithAsyncComponent);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,