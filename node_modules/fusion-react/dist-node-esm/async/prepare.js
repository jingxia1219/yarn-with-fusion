function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
import * as React from 'react';
import ssrPrepass from 'react-ssr-prepass';
import PropTypes from 'prop-types';

class PrepareState {
  constructor() {
    this.seen = new Map();
    this.pending = new Map();
  }

  isResolved(Component, effectId, effectPromiseThunk) {
    let seenEffectIds = this.seen.get(Component);
    let pendingPromises = this.pending.get(Component); // Initialize if not present

    if (!seenEffectIds) {
      seenEffectIds = new Set();
      this.seen.set(Component, seenEffectIds);
    } // If seen and not pending, then it has been resolved


    if (seenEffectIds.has(effectId) && (!pendingPromises || !pendingPromises.has(effectId))) {
      return true;
    } // If not yet seen, need to start promise


    if (!seenEffectIds.has(effectId)) {
      if (!pendingPromises) {
        pendingPromises = new Map();
        this.pending.set(Component, pendingPromises);
      }

      const effectPromise = effectPromiseThunk();
      seenEffectIds.add(effectId);
      pendingPromises.set(effectId, effectPromise);
    }

    return false;
  }

  consumeAndAwaitPromises() {
    let promises = [];

    for (let map of this.pending.values()) {
      for (let promise of map.values()) {
        promises.push(promise);
      }
    }

    this.pending = new Map(); // clear

    return Promise.all(promises);
  }

}

export default function prepare(element, ctx) {
  const prepareState = new PrepareState();

  class PrepareContextProvider extends React.Component {
    getChildContext() {
      return {
        __IS_PREPARE__: true,
        __PREPARE_STATE__: prepareState
      };
    }

    render() {
      return element;
    }

  }

  _defineProperty(PrepareContextProvider, "childContextTypes", {
    __PREPARE_STATE__: PropTypes.any,
    __IS_PREPARE__: PropTypes.any
  });

  async function process() {
    if (ctx && ctx.timing) {
      ctx.timing.markPrepass();
    }

    await ssrPrepass( /*#__PURE__*/React.createElement(PrepareContextProvider));

    if (ctx && ctx.timing) {
      ctx.timing.markPrepass(prepareState.pending.size);
    }

    if (prepareState.pending.size) {
      return prepareState.consumeAndAwaitPromises().then(process);
    }
  }

  return Promise.resolve().then(process);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hc3luYy9wcmVwYXJlLmpzIl0sIm5hbWVzIjpbIlJlYWN0Iiwic3NyUHJlcGFzcyIsIlByb3BUeXBlcyIsIlByZXBhcmVTdGF0ZSIsImNvbnN0cnVjdG9yIiwic2VlbiIsIk1hcCIsInBlbmRpbmciLCJpc1Jlc29sdmVkIiwiQ29tcG9uZW50IiwiZWZmZWN0SWQiLCJlZmZlY3RQcm9taXNlVGh1bmsiLCJzZWVuRWZmZWN0SWRzIiwiZ2V0IiwicGVuZGluZ1Byb21pc2VzIiwiU2V0Iiwic2V0IiwiaGFzIiwiZWZmZWN0UHJvbWlzZSIsImFkZCIsImNvbnN1bWVBbmRBd2FpdFByb21pc2VzIiwicHJvbWlzZXMiLCJtYXAiLCJ2YWx1ZXMiLCJwcm9taXNlIiwicHVzaCIsIlByb21pc2UiLCJhbGwiLCJwcmVwYXJlIiwiZWxlbWVudCIsImN0eCIsInByZXBhcmVTdGF0ZSIsIlByZXBhcmVDb250ZXh0UHJvdmlkZXIiLCJnZXRDaGlsZENvbnRleHQiLCJfX0lTX1BSRVBBUkVfXyIsIl9fUFJFUEFSRV9TVEFURV9fIiwicmVuZGVyIiwiYW55IiwicHJvY2VzcyIsInRpbWluZyIsIm1hcmtQcmVwYXNzIiwiY3JlYXRlRWxlbWVudCIsInNpemUiLCJ0aGVuIiwicmVzb2x2ZSJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBLE9BQU8sS0FBS0EsS0FBWixNQUF1QixPQUF2QjtBQUNBLE9BQU9DLFVBQVAsTUFBdUIsbUJBQXZCO0FBQ0EsT0FBT0MsU0FBUCxNQUFzQixZQUF0Qjs7QUFFQSxNQUFNQyxZQUFOLENBQW1CO0FBSWpCQyxFQUFBQSxXQUFXLEdBQUc7QUFDWixTQUFLQyxJQUFMLEdBQVksSUFBSUMsR0FBSixFQUFaO0FBQ0EsU0FBS0MsT0FBTCxHQUFlLElBQUlELEdBQUosRUFBZjtBQUNEOztBQUVERSxFQUFBQSxVQUFVLENBQUNDLFNBQUQsRUFBWUMsUUFBWixFQUFzQkMsa0JBQXRCLEVBQTBDO0FB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YixDQUFxQm1DLElBQTVDO0FBQ0Q7O0FBQ0QsUUFBSVgsWUFBWSxDQUFDeEIsT0FBYixDQUFxQm1DLElBQXpCLEVBQStCO0FBQzdCLGFBQU9YLFlBQVksQ0FBQ1gsdUJBQWIsR0FBdUN1QixJQUF2QyxDQUE0Q0wsT0FBNUMsQ0FBUDtBQUNEO0FBQ0Y7O0FBRUQsU0FBT1osT0FBTyxDQUFDa0IsT0FBUixHQUFrQkQsSUFBbEIsQ0FBdUJMLE9BQXZCLENBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBDb3B5cmlnaHQgKGMpIDIwMTggVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICovXG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzc3JQcmVwYXNzIGZyb20gJ3JlYWN0LXNzci1wcmVwYXNzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbmNsYXNzIFByZXBhcmVTdGF0ZSB7XG4gIHNlZW46IE1hcDxhbnksIFNldDxzdHJpbmc+PjtcbiAgcGVuZGluZzogTWFwPGFueSwgTWFwPHN0cmluZywgUHJvbWlzZTxhbnk+Pj47XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5zZWVuID0gbmV3IE1hcCgpO1xuICAgIHRoaXMucGVuZGluZyA9IG5ldyBNYXAoKTtcbiAgfVxuXG4gIGlzUmVzb2x2ZWQoQ29tcG9uZW50LCBlZmZlY3RJZCwgZWZmZWN0UHJvbWlzZVRodW5rKSB7XG4gICAgbGV0IHNlZW5FZmZlY3RJZHMgPSB0aGlzLnNlZW4uZ2V0KENvbXBvbmVudCk7XG4gICAgbGV0IHBlbmRpbmdQcm9taXNlcyA9IHRoaXMucGVuZGluZy5nZXQoQ29tcG9uZW50KTtcblxuICAgIC8vIEluaXRpYWxpemUgaWYgbm90IHByZXNlbnRcbiAgICBpZiAoIXNlZW5FZmZlY3RJZHMpIHtcbiAgICAgIHNlZW5FZmZlY3RJZHMgPSBuZXcgU2V0KCk7XG4gICAgICB0aGlzLnNlZW4uc2V0KENvbXBvbmVudCwgc2VlbkVmZmVjdElkcyk7XG4gICAgfVxuXG4gICAgLy8gSWYgc2VlbiBhbmQgbm90IHBlbmRpbmcsIHRoZW4gaXQgaGFzIGJlZW4gcmVzb2x2ZWRcbiAgICBpZiAoXG4gICAgICBzZWVuRWZmZWN0SWRzLmhhcyhlZmZlY3RJZCkgJiZcbiAgICAgICghcGVuZGluZ1Byb21pc2VzIHx8ICFwZW5kaW5nUHJvbWlzZXMuaGFzKGVmZmVjdElkKSlcbiAgICApIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8vIElmIG5vdCB5ZXQgc2VlbiwgbmVlZCB0byBzdGFydCBwcm9taXNlXG4gICAgaWYgKCFzZWVuRWZmZWN0SWRzLmhhcyhlZmZlY3RJZCkpIHtcbiAgICAgIGlmICghcGVuZGluZ1Byb21pc2VzKSB7XG4gICAgICAgIHBlbmRpbmdQcm9taXNlcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy5wZW5kaW5nLnNldChDb21wb25lbnQsIHBlbmRpbmdQcm9taXNlcyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGVmZmVjdFByb21pc2UgPSBlZmZlY3RQcm9taXNlVGh1bmsoKTtcbiAgICAgIHNlZW5FZmZlY3RJZHMuYWRkKGVmZmVjdElkKTtcbiAgICAgIHBlbmRpbmdQcm9taXNlcy5zZXQoZWZmZWN0SWQsIGVmZmVjdFByb21pc2UpO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN1bWVBbmRBd2FpdFByb21pc2VzKCkge1xuICAgIGxldCBwcm9taXNlcyA9IFtdO1xuICAgIGZvciAobGV0IG1hcCBvZiB0aGlzLnBlbmRpbmcudmFsdWVzKCkpIHtcbiAgICAgIGZvciAobGV0IHByb21pc2Ugb2YgbWFwLnZhbHVlcygpKSB7XG4gICAgICAgIHByb21pc2VzLnB1c2gocHJvbWlzZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5wZW5kaW5nID0gbmV3IE1hcCgpOyAvLyBjbGVhclxuICAgIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcHJlcGFyZShlbGVtZW50OiBhbnksIGN0eDogYW55KSB7XG4gIGNvbnN0IHByZXBhcmVTdGF0ZSA9IG5ldyBQcmVwYXJlU3RhdGUoKTtcblxuICBjbGFzcyBQcmVwYXJlQ29udGV4dFByb3ZpZGVyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PHt9PiB7XG4gICAgZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgX19JU19QUkVQQVJFX186IHRydWUsXG4gICAgICAgIF9fUFJFUEFSRV9TVEFURV9fOiBwcmVwYXJlU3RhdGUsXG4gICAgICB9O1xuICAgIH1cbiAgICByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gZWxlbWVudDtcbiAgICB9XG4gICAgc3RhdGljIGNoaWxkQ29udGV4dFR5cGVzID0ge1xuICAgICAgX19QUkVQQVJFX1NUQVRFX186IFByb3BUeXBlcy5hbnksXG4gICAgICBfX0lTX1BSRVBBUkVfXzogUHJvcFR5cGVzLmFueSxcbiAgICB9O1xuICB9XG5cbiAgYXN5bmMgZnVuY3Rpb24gcHJvY2VzcygpIHtcbiAgICBpZiAoY3R4ICYmIGN0eC50aW1pbmcpIHtcbiAgICAgIGN0eC50aW1pbmcubWFya1ByZXBhc3MoKTtcbiAgICB9XG4gICAgYXdhaXQgc3NyUHJlcGFzcyhSZWFjdC5jcmVhdGVFbGVtZW50KFByZXBhcmVDb250ZXh0UHJvdmlkZXIpKTtcbiAgICBpZiAoY3R4ICYmIGN0eC50aW1pbmcpIHtcbiAgICAgIGN0eC50aW1pbmcubWFya1ByZXBhc3MocHJlcGFyZVN0YXRlLnBlbmRpbmcuc2l6ZSk7XG4gICAgfVxuICAgIGlmIChwcmVwYXJlU3RhdGUucGVuZGluZy5zaXplKSB7XG4gICAgICByZXR1cm4gcHJlcGFyZVN0YXRlLmNvbnN1bWVBbmRBd2FpdFByb21pc2VzKCkudGhlbihwcm9jZXNzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihwcm9jZXNzKTtcbn1cbiJdfQ==