/** Copyright (c) 2019 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
import * as React from 'react';
import { jsx as _jsx } from "react/jsx-runtime";
export const FusionContext = /*#__PURE__*/React.createContext({});
export const ServiceContext = /*#__PURE__*/React.createContext(() => {
  throw new Error('`ServiceContext.Provider` was not found. This occurs if you are attempting to use `ServiceContext` in a non-React Fusion.js application.');
});
export function useService(token) {
  const getService = React.useContext(ServiceContext);
  const provides = getService(token);
  return provides;
}
export function ServiceConsumer({
  token,
  children
}) {
  return /*#__PURE__*/_jsx(ServiceContext.Consumer, {
    children: getService => {
      const provides = getService(token);
      return children(provides);
    }
  });
}

function getServices(getService, deps) {
  const services = {};
  Object.keys(deps).forEach(name => {
    services[name] = getService(deps[name]);
  });
  return services;
}

const identity = i => i;

export function withServices(deps, mapServicesToProps = identity) {
  function resolve(getService) {
    const services = getServices(getService, deps);
    const serviceProps = mapServicesToProps(services);
    return serviceProps;
  }

  return Component => {
    return function WithServices(props) {
      return /*#__PURE__*/_jsx(ServiceContext.Consumer, {
        children: getService => /*#__PURE__*/_jsx(Component, { ...resolve(getService),
          ...props
        })
      });
    };
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9jb250ZXh0LmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwiRnVzaW9uQ29udGV4dCIsImNyZWF0ZUNvbnRleHQiLCJTZXJ2aWNlQ29udGV4dCIsIkVycm9yIiwidXNlU2VydmljZSIsInRva2VuIiwiZ2V0U2VydmljZSIsInVzZUNvbnRleHQiLCJwcm92aWRlcyIsIlNlcnZpY2VDb25zdW1lciIsImNoaWxkcmVuIiwiZ2V0U2VydmljZXMiLCJkZXBzIiwic2VydmljZXMiLCJPYmplY3QiLCJrZXlzIiwiZm9yRWFjaCIsIm5hbWUiLCJpZGVudGl0eSIsImkiLCJ3aXRoU2VydmljZXMiLCJtYXBTZXJ2aWNlc1RvUHJvcHMiLCJyZXNvbHZlIiwic2VydmljZVByb3BzIiwiQ29tcG9uZW50IiwiV2l0aFNlcnZpY2VzIiwicHJvcHMiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTyxLQUFLQSxLQUFaLE1BQXVCLE9BQXZCOztBQUdBLE9BQU8sTUFBTUMsYUFBYSxnQkFBR0QsS0FBSyxDQUFDRSxhQUFOLENBQXlCLEVBQXpCLENBQXRCO0FBQ1AsT0FBTyxNQUFNQyxjQUFjLGdCQUFHSCxLQUFLLENBQUNFLGFBQU4sQ0FBeUIsTUFBTTtBQUMzRCxRQUFNLElBQUlFLEtBQUosQ0FDSiwwSUFESSxDQUFOO0FBR0QsQ0FKNkIsQ0FBdkI7QUFRUCxPQUFPLFNBQVNDLFVBQVQsQ0FBOEJDLEtBQTlCLEVBQXNFO0FBQzNFLFFBQU1DLFVBQVUsR0FDZFAsS0FBSyxDQUFDUSxVQUFOLENBQXNETCxjQUF0RCxDQURGO0FBRUEsUUFBTU0sUUFBUSxHQUFHRixVQUFVLENBQUNELEtBQUQsQ0FBM0I7QUFDQSxTQUFPRyxRQUFQO0FBQ0Q7QUFPRCxPQUFPLFNBQVNDLGVBQVQsQ0FBbUM7QUFDeENKLEVBQUFBLEtBRHdDO0FBRXhDSyxFQUFBQTtBQUZ3QyxDQUFuQyxFQUc0QjtBQUNqQyxzQkFDRSxLQUFDLGNBQUQsQ0FBZ0IsUUFBaEI7QUFBQSxjQUNJSixVQUFELElBQXFEO0FBQ3BELFlBQU1FLFFBQVEsR0FBR0YsVUFBVSxDQUFDRCxLQUFELENBQTNCO0FBQ0EsYUFBT0ssUUFBUSxDQUFDRixRQUFELENBQWY7QUFDRDtBQUpILElBREY7QUFRRDs7QUFPRCxTQUFTRyxXQUFULENBQXFCTCxVQUFyQixFQUFpQ00sSUFBakMsRUFBK0Q7QUFDN0QsUUFBTUMsUUFBUSxHQUFHLEVBQWpCO0FBRUFDLEVBQUFBLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZSCxJQUFaLEVBQWtCSSxPQUFsQixDQUEyQkMsSUFBRCxJQUFrQjtBQUMxQ0osSUFBQUEsUUFBUSxDQUFDSSxJQUFELENBQVIsR0FBaUJYLFVBQVUsQ0FBQ00sSUFBSSxDQUFDSyxJQUFELENBQUwsQ0FBM0I7QUFDRCxHQUZEO0FBSUEsU0FBT0osUUFBUDtBQUNEOztBQUVELE1BQU1LLFFBQVEsR0FBSUMsQ0FBRCxJQUFPQSxDQUF4Qjs7QUFFQSxPQUFPLFNBQVNDLFlBQVQsQ0FDTFIsSUFESyxFQUVMUyxrQkFBMEIsR0FBR0gsUUFGeEIsRUFHTDtBQUNBLFdBQVNJLE9BQVQsQ0FBaUJoQixVQUFqQixFQUE2QjtBQUMzQixVQUFNTyxRQUFRLEdBQUdGLFdBQVcsQ0FBQ0wsVUFBRCxFQUFhTSxJQUFiLENBQTVCO0FBQ0EsVUFBTVcsWUFBWSxHQUFHRixrQkFBa0IsQ0FBQ1IsUUFBRCxDQUF2QztBQUVBLFdBQU9VLFlBQVA7QUFDRDs7QUFFRCxTQUFRQyxTQUFELElBQXVDO0FBQzVDLFdBQU8sU0FBU0MsWUFBVCxDQUFzQkMsS0FBdEIsRUFBcUM7QUFDMUMsMEJBQ0UsS0FBQyxjQUFELENBQWdCLFFBQWhCO0FBQUEsa0JBQ0lwQixVQUFELGlCQUNDLEtBQUMsU0FBRCxPQUFlZ0IsT0FBTyxDQUFDaEIsVUFBRCxDQUF0QjtBQUFBLGFBQXdDb0I7QUFBeEM7QUFGSixRQURGO0FBT0QsS0FSRDtBQVNELEdBVkQ7QUFXRCIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBDb3B5cmlnaHQgKGMpIDIwMTkgVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICovXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdHlwZSB7RWxlbWVudH0gZnJvbSAncmVhY3QnO1xuXG5leHBvcnQgY29uc3QgRnVzaW9uQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQ8YW55Pih7fSk7XG5leHBvcnQgY29uc3QgU2VydmljZUNvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0PGFueT4oKCkgPT4ge1xuICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgJ2BTZXJ2aWNlQ29udGV4dC5Qcm92aWRlcmAgd2FzIG5vdCBmb3VuZC4gVGhpcyBvY2N1cnMgaWYgeW91IGFyZSBhdHRlbXB0aW5nIHRvIHVzZSBgU2VydmljZUNvbnRleHRgIGluIGEgbm9uLVJlYWN0IEZ1c2lvbi5qcyBhcHBsaWNhdGlvbi4nXG4gICk7XG59KTtcblxudHlwZSBSZXR1cm5zVHlwZTxUPiA9ICgpID0+IFQ7XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VTZXJ2aWNlPFRTZXJ2aWNlPih0b2tlbjogUmV0dXJuc1R5cGU8VFNlcnZpY2U+KTogVFNlcnZpY2Uge1xuICBjb25zdCBnZXRTZXJ2aWNlID1cbiAgICBSZWFjdC51c2VDb250ZXh0PChSZXR1cm5zVHlwZTxUU2VydmljZT4pID0+IFRTZXJ2aWNlPihTZXJ2aWNlQ29udGV4dCk7XG4gIGNvbnN0IHByb3ZpZGVzID0gZ2V0U2VydmljZSh0b2tlbik7XG4gIHJldHVybiBwcm92aWRlcztcbn1cblxudHlwZSBTZXJ2aWNlQ29uc3VtZXJQcm9wczxUU2VydmljZT4gPSB7XG4gIHRva2VuOiBSZXR1cm5zVHlwZTxUU2VydmljZT4sXG4gIGNoaWxkcmVuOiAoVFNlcnZpY2UpID0+IEVsZW1lbnQ8YW55Pixcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBTZXJ2aWNlQ29uc3VtZXI8VFNlcnZpY2U+KHtcbiAgdG9rZW4sXG4gIGNoaWxkcmVuLFxufTogU2VydmljZUNvbnN1bWVyUHJvcHM8VFNlcnZpY2U+KSB7XG4gIHJldHVybiAoXG4gICAgPFNlcnZpY2VDb250ZXh0LkNvbnN1bWVyPlxuICAgICAgeyhnZXRTZXJ2aWNlOiAoUmV0dXJuc1R5cGU8VFNlcnZpY2U+KSA9PiBUU2VydmljZSkgPT4ge1xuICAgICAgICBjb25zdCBwcm92aWRlcyA9IGdldFNlcnZpY2UodG9rZW4pO1xuICAgICAgICByZXR1cm4gY2hpbGRyZW4ocHJvdmlkZXMpO1xuICAgICAgfX1cbiAgICA8L1NlcnZpY2VDb250ZXh0LkNvbnN1bWVyPlxuICApO1xufVxuXG50eXBlIERlcGVuZGVuY2llcyA9IHtbc3RyaW5nXTogUmV0dXJuc1R5cGU8bWl4ZWQ+fTtcbnR5cGUgU2VydmljZXMgPSB7W3N0cmluZ106IFJldHVybnNUeXBlPG1peGVkPn07XG50eXBlIFByb3BzID0ge1tzdHJpbmddOiBhbnl9O1xudHlwZSBNYXBwZXIgPSAoU2VydmljZXMpID0+IFByb3BzO1xuXG5mdW5jdGlvbiBnZXRTZXJ2aWNlcyhnZXRTZXJ2aWNlLCBkZXBzOiBEZXBlbmRlbmNpZXMpOiBTZXJ2aWNlcyB7XG4gIGNvbnN0IHNlcnZpY2VzID0ge307XG5cbiAgT2JqZWN0LmtleXMoZGVwcykuZm9yRWFjaCgobmFtZTogc3RyaW5nKSA9PiB7XG4gICAgc2VydmljZXNbbmFtZV0gPSBnZXRTZXJ2aWNlKGRlcHNbbmFtZV0pO1xuICB9KTtcblxuICByZXR1cm4gc2VydmljZXM7XG59XG5cbmNvbnN0IGlkZW50aXR5ID0gKGkpID0+IGk7XG5cbmV4cG9ydCBmdW5jdGlvbiB3aXRoU2VydmljZXMoXG4gIGRlcHM6IERlcGVuZGVuY2llcyxcbiAgbWFwU2VydmljZXNUb1Byb3BzOiBNYXBwZXIgPSBpZGVudGl0eVxuKSB7XG4gIGZ1bmN0aW9uIHJlc29sdmUoZ2V0U2VydmljZSkge1xuICAgIGNvbnN0IHNlcnZpY2VzID0gZ2V0U2VydmljZXMoZ2V0U2VydmljZSwgZGVwcyk7XG4gICAgY29uc3Qgc2VydmljZVByb3BzID0gbWFwU2VydmljZXNUb1Byb3BzKHNlcnZpY2VzKTtcblxuICAgIHJldHVybiBzZXJ2aWNlUHJvcHM7XG4gIH1cblxuICByZXR1cm4gKENvbXBvbmVudDogUmVhY3QuQ29tcG9uZW50VHlwZTwqPikgPT4ge1xuICAgIHJldHVybiBmdW5jdGlvbiBXaXRoU2VydmljZXMocHJvcHM/OiBQcm9wcykge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPFNlcnZpY2VDb250ZXh0LkNvbnN1bWVyPlxuICAgICAgICAgIHsoZ2V0U2VydmljZTogPFRTZXJ2aWNlPihSZXR1cm5zVHlwZTxUU2VydmljZT4pID0+IFRTZXJ2aWNlKSA9PiAoXG4gICAgICAgICAgICA8Q29tcG9uZW50IHsuLi5yZXNvbHZlKGdldFNlcnZpY2UpfSB7Li4ucHJvcHN9IC8+XG4gICAgICAgICAgKX1cbiAgICAgICAgPC9TZXJ2aWNlQ29udGV4dC5Db25zdW1lcj5cbiAgICAgICk7XG4gICAgfTtcbiAgfTtcbn1cbiJdfQ==